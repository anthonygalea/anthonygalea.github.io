<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Anthony Galea</title>
    <link>http://www.anthony-galea.com/post/index.xml</link>
    <description>Recent content in Posts on Anthony Galea</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.anthony-galea.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Iterated Function Systems</title>
      <link>http://www.anthony-galea.com/blog/post/iterated-function-systems/</link>
      <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/iterated-function-systems/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If everything goes according to plan your browser should paint a picture of a tree within the next few seconds. Assuming that works, you can experiment with &lt;code&gt;iterations&lt;/code&gt; and &lt;code&gt;transformations&lt;/code&gt; below and the tree will repaint. Go ahead, give it a try.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34; style=&#34;display: none;&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;pre class=&#34;highlight&#34;&gt;
&lt;code class=&#34;language-klipse&#34;&gt;

(defn transform [transformation point]
  (let [[a b c d e f] transformation
        [x y] point]
    [(+ e
        (+ (* a x)
           (* b y)))
     (+ f
        (+ (* c x)
           (* d y)))]))

(defn ifs [{:keys [iterations
                   transformations]}]
  (loop [i 0
         r (transient [[1 1]])]
    (if (&lt; i iterations)
      (recur (inc i)
             (conj! r (transform (rand-nth transformations)
                                 (nth r (- (count r) 1)))))
      (drop 100 (persistent! r)))))

(defn log [x y]
  (/ (.log js/Math y)
     (.log js/Math x)))

(def colour-1 [122 92 29])
(def colour-2 [154 89 40])

(defn draw [points canvas]
  (let [canvas (js/document.getElementById canvas)
        ctx (.getContext canvas &#34;2d&#34;)
        width (.-width canvas)
        height (.-height canvas)
        image (.createImageData ctx width height)
        max-x (apply max (map first points))
        max-y (apply max (map second points))
        mapped (frequencies (map (fn [[x y]]
                                     [(int (* width (/ x max-x)))
                                      (int (* height (/ y max-y)))]) points))
        max-v (apply max (map second mapped))
        total-pixels (* width height)
        pixel-data (map (fn [[[x y] v]]
                          (let [r1 (log v max-v)
                                r2 (- 1 r1)]
                            (into [(* 4 (+ x (- total-pixels (* width y))))]
                                  (map #(+ (* r1 %1) (* r2 %2)) colour-1 colour-2)))) mapped)]
      (doseq [[i r g b] pixel-data]
       (aset image.data i r)
       (aset image.data (+ i 1) g)
       (aset image.data (+ i 2) b)
       (aset image.data (+ i 3) 255))
      (.putImageData ctx image 0 0)))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;canvas id=&#34;canvas-tree&#34; class=&#34;center&#34; width=&#34;350&#34; height=&#34;350&#34;&gt;&lt;/canvas&gt;&lt;/div&gt;

&lt;div class=&#34;listingblock&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;pre class=&#34;highlight&#34;&gt;
&lt;code class=&#34;language-klipse&#34; data-max-eval-duration=&#34;30000&#34;&gt;

(def tree {:iterations 60000
           :transformations [[0.195 -0.488 0.344 0.443 0.4431 0.2453]
                             [0.462 0.414 -0.252 0.361 0.2511 0.5692]
                             [-0.058 -0.07 0.453 -0.111 0.5976 0.0969]
                             [-0.035 0.07 -0.469 -0.022 0.4884 0.5069]
                             [-0.637 0 0 0.501 0.8562 0.2513]]})

(draw (ifs tree) &#34;canvas-tree&#34;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s try again, this time with a snowflake:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;canvas id=&#34;canvas-snowflake&#34; class=&#34;center&#34; width=&#34;350&#34; height=&#34;350&#34;&gt;&lt;/canvas&gt;&lt;/div&gt;

&lt;div class=&#34;listingblock&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;pre class=&#34;highlight&#34;&gt;
&lt;code class=&#34;language-klipse&#34; data-max-eval-duration=&#34;30000&#34;&gt;

(def colour-1 [125 92 69])
(def colour-2 [254 89 40])

(def snowflake {:iterations 60000
                :transformations [[0.75 0 0 0.75 0.125 0.125]
                                  [0.5 0.5 -0.5 0.5 0 0.5]
                                  [0.25 0 0 0.25 0 0.75]
                                  [0.25 0 0 0.25 0.75 0.75]
                                  [0.25 0 0 0.25 0 0]
                                  [0.25 0 0 0.25 0.75 0]]})

(draw (ifs snowflake) &#34;canvas-snowflake&#34;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Perhaps not the best choice of colours, but I&amp;#8217;m sure you can fix that. And here&amp;#8217;s a couple more examples to play around with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;canvas id=&#34;canvas-weed&#34; class=&#34;center&#34; width=&#34;350&#34; height=&#34;350&#34;&gt;&lt;/canvas&gt;&lt;/div&gt;

&lt;div class=&#34;listingblock&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;pre class=&#34;highlight&#34;&gt;
&lt;code class=&#34;language-klipse&#34; data-max-eval-duration=&#34;30000&#34;&gt;

(def colour-1 [122 92 29])
(def colour-2 [154 89 40])

(def weed {:iterations 60000
           :transformations [[0.5 0 0 0.75 0.25 0]
                             [0.25 0.1 -0.2 0.3 0.25 0.5]
                             [0.25 -0.1 0.2 0.3 0.5 0.4]
                             [0.2 0 0 0.3 0.4 0.55]]})

(draw (ifs weed) &#34;canvas-weed&#34;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;canvas id=&#34;canvas-crystal&#34; class=&#34;center&#34; width=&#34;350&#34; height=&#34;350&#34;&gt;&lt;/canvas&gt;&lt;/div&gt;

&lt;div class=&#34;listingblock&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;pre class=&#34;highlight&#34;&gt;
&lt;code class=&#34;language-klipse&#34; data-max-eval-duration=&#34;30000&#34;&gt;

(def colour-1 [51 60 139])
(def colour-2 [54 34 63])

(def crystal {:iterations 60000
              :transformations [[0.0 -0.5  0.5 0.0 0.5  0.0]
                                [0.0  0.5 -0.5 0.0 0.5  0.5]
                                [0.5  0.0  0.0 0.5 0.25 0.5]]})

(draw (ifs crystal) &#34;canvas-crystal&#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;canvas id=&#34;canvas-fractals-island&#34; class=&#34;center&#34; width=&#34;350&#34; height=&#34;350&#34;&gt;&lt;/canvas&gt;&lt;/div&gt;

&lt;div class=&#34;listingblock&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;pre class=&#34;highlight&#34;&gt;
&lt;code class=&#34;language-klipse&#34;  data-max-eval-duration=&#34;30000&#34;&gt;

(def colour-1 [65 92 69])
(def colour-2 [12 89 80])

(def fractals-island {:iterations 60000
                      :transformations [[0 0.547 -0.547 0 0.0951 0.5893]
                                        [0 0.547 -0.547 0 0.4413 0.7893]
                                        [0 0.547 -0.547 0 0.0952 0.9893]]})

(draw (ifs fractals-island) &#34;canvas-fractals-island&#34;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;canvas id=&#34;canvas-pine-tree&#34; class=&#34;center&#34; width=&#34;350&#34; height=&#34;350&#34;&gt;&lt;/canvas&gt;&lt;/div&gt;

&lt;div class=&#34;listingblock&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;pre class=&#34;highlight&#34;&gt;
&lt;code class=&#34;language-klipse&#34; data-max-eval-duration=&#34;30000&#34;&gt;

(def colour-1 [122 92 29])
(def colour-2 [154 89 40])

(def pine-tree {:iterations 60000
                :transformations [[0.25 0 0 0.9 0.375 0]
                                  [0.65 0 0 0.75 0.175 0.25]
                                  [0 -0.5 0.25 0 0.5 0.2]
                                  [0 0.5 -0.25 0 0.5 0.45]]})

(draw (ifs pine-tree) &#34;canvas-pine-tree&#34;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But how does it work? Well, it is using a technique for drawing fractals known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Iterated_function_system&#34;&gt;Iterated Functions Systems&lt;/a&gt;. You can find all the code required for this page to work below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;&lt;div class=&#34;content&#34;&gt;&lt;pre class=&#34;highlight&#34;&gt;
&lt;code class=&#34;language-klipse&#34; data-max-eval-duration=&#34;30000&#34;&gt;

(defn transform [transformation point]
  (let [[a b c d e f] transformation
        [x y] point]
    [(+ e
        (+ (* a x)
           (* b y)))
     (+ f
        (+ (* c x)
           (* d y)))]))

(defn ifs [{:keys [iterations
                   transformations]}]
  (loop [i 0
         r (transient [[1 1]])]
    (if (&lt; i iterations)
      (recur (inc i)
             (conj! r (transform (rand-nth transformations)
                                 (nth r (- (count r) 1)))))
      (drop 100 (persistent! r)))))

(defn log [x y]
  (/ (.log js/Math y)
     (.log js/Math x)))

(defn draw [points canvas]
  (let [canvas (js/document.getElementById canvas)
        ctx (.getContext canvas &#34;2d&#34;)
        width (.-width canvas)
        height (.-height canvas)
        image (.createImageData ctx width height)
        max-x (apply max (map first points))
        max-y (apply max (map second points))
        mapped (frequencies (map (fn [[x y]]
                                     [(int (* width (/ x max-x)))
                                      (int (* height (/ y max-y)))]) points))
        max-v (apply max (map second mapped))
        total-pixels (* width height)
        pixel-data (map (fn [[[x y] v]]
                          (let [r1 (log v max-v)
                                r2 (- 1 r1)]
                            (into [(* 4 (+ x (- total-pixels (* width y))))]
                                  (map #(+ (* r1 %1) (* r2 %2)) colour-1 colour-2)))) mapped)]
      (doseq [[i r g b] pixel-data]
       (aset image.data i r)
       (aset image.data (+ i 1) g)
       (aset image.data (+ i 2) b)
       (aset image.data (+ i 3) 255))
      (.putImageData ctx image 0 0)))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The interactive code snippets in this article are powered by &lt;a href=&#34;https://github.com/viebel/klipse&#34;&gt;KLIPSE&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The Template Method Pattern</title>
      <link>http://www.anthony-galea.com/blog/post/the-template-method-pattern/</link>
      <pubDate>Thu, 15 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/the-template-method-pattern/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;Template Method&lt;/code&gt; pattern is a &lt;code&gt;behavioral design pattern&lt;/code&gt; commonly used when a number of algorithms have a common skeleton but they vary in the specifics of the steps. In this article, we will write implementations for a simple example in Java, Scala, Kotlin and Clojure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As an example consider arithmetic and geometric progressions in mathematics. \$3, 5, 7, 9, 11...\$ is an example of an arithmetic progression which has the generic form: \$a, a+f, a+2f, a+3f...\$ with \$a=3, f=2\$. An example of a geometric progression is \$3, 6, 12, 24, 48...\$ which has the generic form of: \$a, af, af^2, af^3...\$ with \$a=3, f=2\$. Now say we have the task of writing \$n\$ values from a progression to stdout. We could implement this as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;tok-nc&#34;&gt;ArithmeticProgression&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;tok-n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;tok-kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;tok-nc&#34;&gt;GeometricProgression&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;tok-n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Notice that for both progressions we need the &lt;code&gt;for loop&lt;/code&gt; and the call to &lt;code&gt;println&lt;/code&gt;. The difference is in the calculation of the nth value. So we could extract the common part to an abstract class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;tok-kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;tok-nc&#34;&gt;Progression&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;tok-n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;nth&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;tok-kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;nth&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and then extend the abstract class for each progression type, overriding the abstract method with the specific version for the algorithm:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;tok-nc&#34;&gt;ArithmeticProgression&lt;/span&gt; &lt;span class=&#34;tok-kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Progression&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-nd&#34;&gt;@Override&lt;/span&gt;
  &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;nth&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;tok-kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;tok-nc&#34;&gt;GeometricProgression&lt;/span&gt; &lt;span class=&#34;tok-kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Progression&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-nd&#34;&gt;@Override&lt;/span&gt;
  &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;nth&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;By doing this we have cleanly separated the two concerns of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;iterating and printing values (in the parent)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;calculating the nth value (in the children)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;i.e. we get separation of concerns via subclassing. When the &lt;code&gt;output&lt;/code&gt; function is called it delegates the calculation to the correct &lt;code&gt;nth&lt;/code&gt; function in the child class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;Progression&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;arithmeticProgression&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;ArithmeticProgression&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;tok-n&#34;&gt;artithmeticProgression&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;//3, 5, 7, 9, 11&lt;/span&gt;

&lt;span class=&#34;tok-n&#34;&gt;Progression&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;geometricProgression&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;GeometricProgression&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;tok-n&#34;&gt;geometricProgression&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;//3, 6, 12, 24, 48&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In Scala, the separation of concerns can be achieved using function composition. We start by defining the functions to calculate the nth values for both progression types:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;arithmeticNth&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt;
  &lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;

&lt;span class=&#34;tok-n&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;geometricNth&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt;
  &lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;scala&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;toInt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We then define a function that takes one of these two functions as a parameter:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;outputProgression&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;tok-n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;tok-n&#34;&gt;nth&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;nth&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;tok-n&#34;&gt;outputProgression&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;arithmeticNth&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;//3, 5, 7, 9, 11&lt;/span&gt;

&lt;span class=&#34;tok-n&#34;&gt;outputProgression&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;geometricNth&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;//3, 6, 12, 24, 48&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Kotlin is pretty similar:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;kotlin&#34;&gt;&lt;span class=&#34;tok-k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;tok-py&#34;&gt;arithmeticNth&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-k&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;tok-m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;tok-k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;=&lt;/span&gt;
  &lt;span class=&#34;tok-n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;toDouble&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;toDouble&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;toInt&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;tok-k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;tok-py&#34;&gt;geometricNth&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-k&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;tok-m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;tok-k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;outputProgression&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;tok-n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;tok-n&#34;&gt;nth&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-m&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;forEach&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;nth&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;tok-n&#34;&gt;outputProgression&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;arithmeticNth&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;//3, 5, 7, 9, 11&lt;/span&gt;

&lt;span class=&#34;tok-n&#34;&gt;outputProgression&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;geometricNth&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;//3, 6, 12, 24, 48&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Clojure is also pretty much the same:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;output-progression&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;nth&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;map &lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;println &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;nth &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;range &lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))))&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;arithmetic-nth&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;+ &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;* &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;dec &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;geometric-nth&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;int &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;* &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;Math/pow&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;dec &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))))&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;output-progression&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;arithmetic-nth&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; 3, 5, 7, 9, 11&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;output-progression&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;geometric-nth&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; 3, 6, 12, 24, 48&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>4Clojure solutions over time</title>
      <link>http://www.anthony-galea.com/blog/post/4clojure-solutions-over-time/</link>
      <pubDate>Wed, 03 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/4clojure-solutions-over-time/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;iframe
  width=&#34;100%&#34; height=&#34;400&#34;
  src=&#34;//jsfiddle.net/anthonygalea/yukpa0os/embedded/result,js/&#34;
  allowfullscreen=&#34;allowfullscreen&#34;
  frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Somebody recently posted in the Clojure subreddit that there had just been over 1 million problems solved on the &lt;a href=&#34;http://www.4clojure.com/&#34;&gt;4Clojure&lt;/a&gt; website. When I saw this I wondered if we could get a graph of the number of solutions solved over time, so I sent an email to the 4Clojure guys asking if they had the data to generate such a graph. The reply:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I don&amp;#8217;t think we actually save that anywhere, no. Too bad; that&amp;#8217;d be a neat graph.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Checked &lt;a href=&#34;http://web.archive.org/web/*/4clojure.com&#34;&gt;Wayback machine&lt;/a&gt; and there were a bunch of snapshots since 2011. A few curl requests and some grep filtering later I had the counts and could plot a graph with &lt;a href=&#34;http://c3js.org/&#34;&gt;C3.js&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hello parking garage, meet clojure.spec</title>
      <link>http://www.anthony-galea.com/blog/post/hello-parking-garage-meet-clojure.spec/</link>
      <pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/hello-parking-garage-meet-clojure.spec/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this post, we will take the &lt;a href=&#34;http://www.anthony-galea.com/blog/post/simulating-a-parking-garage-with-clojure-refs/&#34;&gt;parking garage problem from the previous post&lt;/a&gt; and see how &lt;code&gt;clojure.spec&lt;/code&gt; might be applied. If you are new to clojure.spec you can check out the &lt;a href=&#34;http://clojure.org/about/spec&#34;&gt;rationale&lt;/a&gt; and the  &lt;a href=&#34;http://clojure.org/guides/spec&#34;&gt;guide&lt;/a&gt; on clojure.org. Let&amp;#8217;s start by specing the data. Recall that we used a map to state how many parking spaces are available on each garage level:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;15&lt;/span&gt;
                     &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We could spec the components of this map &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;number-of-parking-spaces&lt;/code&gt; as positive integers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/def&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::level&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/and&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;int?&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/or&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:zero&lt;/span&gt; &lt;span class=&#34;tok-nb&#34;&gt;zero? &lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:positive&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;pos?&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/def&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::number-of-parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/and&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;int?&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;pos?&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;parking-spaces&lt;/code&gt; can then be specd like so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/def&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/map-of&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::level&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::number-of-parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can then check the validity using &lt;code&gt;clojure.spec/valid?&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/valid?&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;tok-c1&#34;&gt;;;=&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If we were to try an invalid map:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/valid?&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;tok-c1&#34;&gt;;;=&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If we&amp;#8217;re confused as to why our data is not valid, we can use the &lt;code&gt;clojure.spec/explain&lt;/code&gt; or &lt;code&gt;clojure.spec/explain-data&lt;/code&gt; functions to figure out what&amp;#8217;s up. One outputs to stdout, the other returns a map we can more easily traverse:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/explain&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; In: [1 1] val: &amp;quot;10&amp;quot; fails spec: :garage-simulation.core/number-of-parking-spaces at: [1] predicate: int?&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/explain-data&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; =&amp;gt; #:clojure.spec{:problems ({:path [1], :pred int?, :val &amp;quot;10&amp;quot;, :via [:garage-simulation.core/parking-spaces :garage-simulation.core/number-of-parking-spaces], :in [1 1]})}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Using this spec we can even generate some valid samples using the &lt;code&gt;clojure.spec.gen/generate&lt;/code&gt; or &lt;code&gt;clojure.spec.gen/sample&lt;/code&gt; functions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;g/generate&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/gen&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; =&amp;gt; {2868014 31, 3118 28, 46838612 227837, 2631 940026, 109 959746, 275023 58, 61032 3846, 24482 11839, 4370470 92, 1826 412743, 47082 2125773, 190 236375948}&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;g/sample&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/gen&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; =&amp;gt; ({0 1, 2 3} {0 1, 1 1} {0 1, 1 189, 3 2} {1 1, 0 15, 3 1, 2 6} {0 1, 1 5, 4 5, 15 3, 22 6, 6 1, 3 1, 2 2, 8 5} {} {17 10, 5 10, 2 3} {0 7, 30 25, 48 22, 7 117, 10 19, 31 325} {0 2, 1 46, 39 677, 13 69, 6 9, 3 6, 2 712, 23 1, 19 31, 115 21, 5 5} {0 84, 1 2, 15 1, 355 37})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At this point you can see that these samples don&amp;#8217;t really match reality because in parking garages levels usually start at 0 and increase consecutively. We could spec this on the map of course, but even better would be to switch to a data structure which already has these constraints i.e. just use a vector :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/def&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/coll-of&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::number-of-parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:kind&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;vector?&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;g/generate&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/gen&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; =&amp;gt; [359765 242401325 199244 8685 227771037 10073702 21779006 24302758 347572 6381197 84 1488130 1008076 293347674 135 3109580]&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; might be tough to make it out of this garage :)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Having done this change we will need to tweak &lt;code&gt;intialize-garage!&lt;/code&gt; a bit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;initialize-garage!&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Sets the initial state of the garage.&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;dosync&lt;/span&gt;
   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;ref-set &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{})&lt;/span&gt;
   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;ref-set &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;empty-parking-spaces&lt;/span&gt;
            &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;into &lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;{}&lt;/span&gt;
                  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;for &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;level&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;map-indexed&lt;/span&gt; &lt;span class=&#34;tok-nb&#34;&gt;vector &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;tok-nv&#34;&gt;space-number&lt;/span&gt;   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;range &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
                    &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;level&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;space-number&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;])))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Moving on to &lt;code&gt;licence plates&lt;/code&gt;, these are simply strings so we can spec them like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/def&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::licence-plate&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;string?&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There is no global standard for licence plates but if there were we could use a regex to spec the licence plates further. For example if a licence plate were defined as 4 upper case characters followed by 3 digits:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;licence-plate-regex&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;[A-Z]{4}\d{3}&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/def&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::licence-plate&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/and&lt;/span&gt; &lt;span class=&#34;tok-nb&#34;&gt;string? &lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;re-matches &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;licence-plate-regex&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We represented the location for a &lt;code&gt;parking-space&lt;/code&gt; using a vector of two integers: &lt;code&gt;[level space]&lt;/code&gt;. We can define this as well:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/def&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::parking-space&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/coll-of&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/and&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;int?&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/or&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:zero&lt;/span&gt; &lt;span class=&#34;tok-nb&#34;&gt;zero? &lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:positive&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;pos?&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:kind&lt;/span&gt; &lt;span class=&#34;tok-nb&#34;&gt;vector? &lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:count&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Finally we can spec the map used to store the locations of the vehicles in the garage:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/def&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::vehicles&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/map-of&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::licence-plate&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::parking-space&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/valid?&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::vehicles&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;ASDF001&amp;quot;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]})&lt;/span&gt; &lt;span class=&#34;tok-c1&#34;&gt;;; =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now that we&amp;#8217;ve specd the data let&amp;#8217;s move on to the functions. Starting with &lt;code&gt;initialize-garage!&lt;/code&gt; we use &lt;code&gt;clojure.spec/fdef&lt;/code&gt; and specify one argument, namely &lt;code&gt;::parking-spaces&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/fdef&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;initialize-garage!&lt;/span&gt;
        &lt;span class=&#34;tok-ss&#34;&gt;:args&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/cat&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For &lt;code&gt;locate-vehicle&lt;/code&gt; we can also specify the return value:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/fdef&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;locate-vehicle&lt;/span&gt;
        &lt;span class=&#34;tok-ss&#34;&gt;:args&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/cat&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:licence-plate&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;tok-ss&#34;&gt;:ret&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/or&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::parking-space&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;nil?&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;number-of-free-parking-spaces&lt;/code&gt; takes no args but we can specify the return:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/fdef&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;number-of-free-parking-spaces&lt;/span&gt;
        &lt;span class=&#34;tok-ss&#34;&gt;:ret&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/and&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;int?&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/or&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:zero&lt;/span&gt; &lt;span class=&#34;tok-nb&#34;&gt;zero? &lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:positive&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;pos?&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For &lt;code&gt;enter-garage!&lt;/code&gt; we can also specify a relationship between the argument and the return value, namely that the return value should contain the licence plate:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/fdef&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;enter-garage!&lt;/span&gt;
        &lt;span class=&#34;tok-ss&#34;&gt;:args&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/cat&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:licence-plate&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;tok-ss&#34;&gt;:ret&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/or&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::vehicles&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;nil?&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;tok-ss&#34;&gt;:fn&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;contains? &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:ret&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:args&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And similarly for &lt;code&gt;exit-garage!&lt;/code&gt; we can specify that the licence plate for the vehicle that just exited the garage should not be present in the return value:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/fdef&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;exit-garage!&lt;/span&gt;
        &lt;span class=&#34;tok-ss&#34;&gt;:args&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/cat&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:licence-plate&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;tok-ss&#34;&gt;:ret&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/or&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::vehicles&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;nil?&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;tok-ss&#34;&gt;:fn&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;not &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;contains? &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:ret&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:args&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If we turn on instrumentation on a function and then call it with invalid parameters we get an exception with the details of went wrong. In the following examples the first says &#34;Sorry you gave me a number but I need a string&#34;, the second says &#34;Sorry your licence plate doesn&amp;#8217;t match the regex&#34;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;t/instrument&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;enter-garage!&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;enter-garage!&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; ExceptionInfo Call to #&amp;#39;garage-simulation.core/enter-garage! did not conform to spec:&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; In: [0] val: 3 fails spec: :garage-simulation.core/licence-plate at: [:args :licence-plate] predicate: string?&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; :clojure.spec/args  (3)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; :clojure.spec/failure  :instrument&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; :clojure.spec.test/caller  {:file &amp;quot;form-init6892093246791959693.clj&amp;quot;, :line 82, :var-scope garage-simulation.core/eval20779}&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;   clojure.core/ex-info (core.clj:4724)&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;enter-garage!&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;ASDF01&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; ExceptionInfo Call to #&amp;#39;garage-simulation.core/enter-garage! did not conform to spec:&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; In: [0] val: &amp;quot;ASDF01&amp;quot; fails spec: :garage-simulation.core/licence-plate at: [:args :licence-plate] predicate: (re-matches licence-plate-regex %)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; :clojure.spec/args  (&amp;quot;ASDF01&amp;quot;)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; :clojure.spec/failure  :instrument&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; :clojure.spec.test/caller  {:file &amp;quot;form-init6892093246791959693.clj&amp;quot;, :line 75, :var-scope garage-simulation.core/eval20777}&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;   clojure.core/ex-info (core.clj:4724)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Another thing we can do with our specs is something called &lt;code&gt;property based testing&lt;/code&gt;. In &lt;code&gt;unit testing&lt;/code&gt; we usually write tests for specific test cases like we did in the previous post with midje. In property based testing we use a framework (in this case &lt;a href=&#34;https://github.com/clojure/test.check&#34;&gt;test.check&lt;/a&gt;) to automatically generate a range of test cases against which the invariants defined in our spec are verified. We do this using the &lt;code&gt;clojure.spec.test/check&lt;/code&gt; function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;clojure.spec.test/check&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;enter-garage!&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; ExceptionInfo Couldn&amp;#39;t satisfy such-that predicate after 100 tries.  clojure.core/ex-info (core.clj:4724)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Whoops! The problem here is that &lt;code&gt;test.check&lt;/code&gt; tried to generate random strings for licence plates for &lt;code&gt;enter-garage!&lt;/code&gt; but gave up after a 100 tries because they all did not conform to the regex we defined earlier. This would also happen if we directly tried to generate samples for licence plates:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;g/sample&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/gen&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; ExceptionInfo Couldn&amp;#39;t satisfy such-that predicate after 100 tries.  clojure.core/ex-info (core.clj:4724)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can fix this by associating a generator with the spec for licence plates. We can use the &lt;a href=&#34;https://github.com/gfredericks/test.chuck/&#34;&gt;test.chuck&lt;/a&gt; library for this which provides a handy &lt;code&gt;string-from-regex&lt;/code&gt; generator:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/def&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::licence-plate&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/with-gen&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/and&lt;/span&gt; &lt;span class=&#34;tok-nb&#34;&gt;string? &lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;re-matches &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;licence-plate-regex&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;cg/string-from-regex&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;licence-plate-regex&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So now we can generate licence plates at will:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;g/sample&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/gen&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; =&amp;gt; (&amp;quot;YZJY672&amp;quot; &amp;quot;WDPR193&amp;quot; &amp;quot;BMAX543&amp;quot; &amp;quot;BIEL908&amp;quot; &amp;quot;VNJC192&amp;quot; &amp;quot;ZKFA361&amp;quot; &amp;quot;HLYS035&amp;quot; &amp;quot;DAIA703&amp;quot; &amp;quot;WFGS654&amp;quot; &amp;quot;LPSX140&amp;quot;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s move on to verifying the invariant for &lt;code&gt;enter-garage!&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;t/check&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;enter-garage!&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; ({:spec #object[clojure.spec$fspec_impl$reify__13789 0x1fdaac28 &amp;quot;clojure.spec$fspec_impl$reify__13789@1fdaac28&amp;quot;], :clojure.spec.test.check/ret {:result #error {&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;  :cause &amp;quot;Specification-based check failed&amp;quot;&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;  :data {:clojure.spec/problems [{:path [:fn], :pred (contains? (:ret %) (-&amp;gt; % :args :licence-plate)), :val {:args {:licence-plate &amp;quot;SCWE626&amp;quot;}, :ret nil}, :via [], :in []}], :clojure.spec.test/args (&amp;quot;SCWE626&amp;quot;), :clojure.spec.test/val {:args {:licence-plate &amp;quot;SCWE626&amp;quot;}, :ret nil}, :clojure.spec/failure :check-failed}&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;  :via&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;  [{:type clojure.lang.ExceptionInfo&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;    :message &amp;quot;Specification-based check failed&amp;quot;&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;    :data {:clojure.spec/problems [{:path [:fn], :pred (contains? (:ret %) (-&amp;gt; % :args :licence-plate)), :val {:args {:licence-plate &amp;quot;SCWE626&amp;quot;}, :ret nil}, :via [], :in []}], :clojure.spec.test/args (&amp;quot;SCWE626&amp;quot;), :clojure.spec.test/val {:args {:licence-plate &amp;quot;SCWE626&amp;quot;}, :ret nil}, :clojure.spec/failure :check-failed}&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;   ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This doesn&amp;#8217;t look good at all :) The reason it happens is that when &lt;code&gt;check&lt;/code&gt; is called it generates a large number of inputs which in our case exceeds the available space in the garage. This actually points out a problem in the invariant i.e. the vehicle doesn&amp;#8217;t make it into the garage if there is no space available. We can redefine the invariant to accommodate this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/fdef&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;enter-garage!&lt;/span&gt;
        &lt;span class=&#34;tok-ss&#34;&gt;:args&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/cat&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:licence-plate&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;tok-ss&#34;&gt;:ret&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;::vehicles&lt;/span&gt;
        &lt;span class=&#34;tok-ss&#34;&gt;:fn&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;or &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;nil? &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:ret&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;
                 &lt;span class=&#34;tok-nb&#34;&gt;contains? &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:ret&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:args&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;t/check&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;enter-garage!&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;; ({:spec #object[clojure.spec$fspec_impl$reify__13789 0x4d8e87aa &amp;quot;clojure.spec$fspec_impl$reify__13789@4d8e87aa&amp;quot;], :clojure.spec.test.check/ret {:result true, :num-tests 1000, :seed 1469535504589}, :sym garage-simulation.core/enter-garage!})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Much better. Happy specing!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Simulating a parking garage with Clojure Refs</title>
      <link>http://www.anthony-galea.com/blog/post/simulating-a-parking-garage-with-clojure-refs/</link>
      <pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/simulating-a-parking-garage-with-clojure-refs/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this post, we will use a simple problem to illustrate &lt;a href=&#34;http://clojure.org/reference/refs&#34;&gt;Clojure Refs&lt;/a&gt;. All sources are on &lt;a href=&#34;https://github.com/anthonygalea/garage-simulation&#34;&gt;GitHub&lt;/a&gt;. The problem is to simulate operations on a garage used for parking vehicles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://www.anthony-galea.com/images/2017-07-21-parking.png&#34; alt=&#34;2017 07 21 parking&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The vehicles are uniquely identified using their &lt;code&gt;licence plate&lt;/code&gt;. We will represent locations in the garage with vectors like &lt;code&gt;[1 2]&lt;/code&gt;. This vector would represent parking space 2 on level 1. The operations required are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;locate-vehicle&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Given a licence plate, returns the location of a vehicle as a vector with the&lt;/span&gt;
&lt;span class=&#34;tok-s&#34;&gt;   level and parking space number, nil if not present.&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;number-of-free-parking-spaces&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Returns the current number of free parking spaces in the garage.&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[])&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;enter-garage!&lt;/span&gt;
   &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Simulates a vehicle entering the garage. Return the state of the garage if&lt;/span&gt;
&lt;span class=&#34;tok-s&#34;&gt;   there is still free space, nil if no empty parking space exists.&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;exit-garage!&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Simulates a vehicle exiting the garage. Returns the state of the garage if&lt;/span&gt;
&lt;span class=&#34;tok-s&#34;&gt;   such a vehicle exists in the garage, nil otherwise.&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can describe the number of parking spaces on each garage level with a map. For example if our garage has two parking levels, each holding 15 and 10 parking spaces respectively, the map will be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;15&lt;/span&gt;
                     &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This map will be used to initialize the state of the garage:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;initialize-garage!&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Sets the initial state of the garage.&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Based on the signatures of the operations we have defined above, we could write a few tests using &lt;a href=&#34;https://github.com/marick/Midje&#34;&gt;midje&lt;/a&gt; to indicate how the operations could be used:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;against-background&lt;/span&gt;
 &lt;span class=&#34;tok-p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;before&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:facts&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;initialize-garage!&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}))]&lt;/span&gt;

 &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;fact&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;After a vehicle enters the garage it should be possible to locate it.&amp;quot;&lt;/span&gt;
       &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;ASDF001&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
           &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;enter-garage!&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;locate-vehicle&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;])&lt;/span&gt;

 &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;fact&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;If an attempt to locate an unknown vehicle is made nil should be&lt;/span&gt;
&lt;span class=&#34;tok-s&#34;&gt;       returned.&amp;quot;&lt;/span&gt;
       &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;locate-vehicle&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;unknown licence plate&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;

 &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;fact&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;After a vehicle enters the garage the number of free parking spaces&lt;/span&gt;
&lt;span class=&#34;tok-s&#34;&gt;        should be one less than before.&amp;quot;&lt;/span&gt;
       &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;free-parking-spaces-before&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;number-of-free-parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
         &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;enter-garage!&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;ASDF001&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;number-of-free-parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;dec &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;free-parking-spaces-before&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))&lt;/span&gt;

 &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;fact&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;If too many vehicles try to enter the garage nil should be returned.&amp;quot;&lt;/span&gt;
       &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;enter-garage!&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;ASDF001&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;enter-garage!&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;ASDF002&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;enter-garage!&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;ASDF003&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;enter-garage!&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;ASDF004&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;

 &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;fact&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Given a vehicle entered the garage it should be possible for that&lt;/span&gt;
&lt;span class=&#34;tok-s&#34;&gt;       vehicle to exit the garage.&amp;quot;&lt;/span&gt;
       &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;ASDF001&amp;quot;&lt;/span&gt;
             &lt;span class=&#34;tok-nv&#34;&gt;free-parking-spaces-before&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;number-of-free-parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
         &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;enter-garage!&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;exit-garage!&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{}&lt;/span&gt;
         &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;number-of-free-parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;free-parking-spaces-before&lt;/span&gt;
         &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;locate-vehicle&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;

 &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;fact&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;If an unknown vehicle is requested to exit the garage nil should be&lt;/span&gt;
&lt;span class=&#34;tok-s&#34;&gt;       returned.&amp;quot;&lt;/span&gt;
       &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;exit-garage!&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;ASDF001&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Before we move on to the implementation, what is a &lt;code&gt;ref&lt;/code&gt;? In Clojure data is immutable, so we have constructs to model the &lt;code&gt;state&lt;/code&gt; of something as it changes over time. The &#34;something&#34; we model has an &lt;code&gt;identity&lt;/code&gt; and this identity can refer to various snapshots of its &lt;code&gt;state&lt;/code&gt; over time. Let&amp;#8217;s start with a simpler construct, the &lt;code&gt;atom&lt;/code&gt;. This is perhaps better explained with an example. Start a REPL and follow along:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-c1&#34;&gt;;; declare an empty map called vehicles&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{})&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; next we apply conj to it to add a new vehicle and it&amp;#39;s location in the garage&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;conj &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;JAFA017&amp;quot;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; =&amp;gt; {&amp;quot;JAFA017&amp;quot; [1 1]}&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; the returned map has one entry as expected but when we inspect vehicles we find it&amp;#39;s still empty:&lt;/span&gt;
&lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; =&amp;gt; {}&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; oh right, vehicles is immutable&lt;/span&gt;

&lt;span class=&#34;tok-c1&#34;&gt;;; we need a way to update vehicles to the new state so we turn vehicles into an atom:&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;atom&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{}))&lt;/span&gt;
&lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; =&amp;gt; #&amp;lt;Atom@dfdcf6c {}&amp;gt;&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; ok so now vehicles is not a map, it&amp;#39;s an atom&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; to get to the state of the atom we have to dereference it with @ like this:&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; {}&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; to change it we use swap!:&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;swap!&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt; &lt;span class=&#34;tok-nb&#34;&gt;conj &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;JAFA017&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; =&amp;gt; {[&amp;quot;JAFA017&amp;quot;] [1 1]})&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; once again:&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;swap!&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt; &lt;span class=&#34;tok-nb&#34;&gt;conj &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;HSLE328&amp;quot;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; =&amp;gt; {&amp;quot;HSLE328&amp;quot; [1 2], [&amp;quot;JAFA017&amp;quot;] [1 1]}&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; and if we check what vehicles stores:&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;;; =&amp;gt; {&amp;quot;HSLE328&amp;quot; [1 2], [&amp;quot;JAFA017&amp;quot;] [1 1]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;swap!&lt;/code&gt; takes an atom (in this case &lt;code&gt;vehicles&lt;/code&gt;), a function (in this case &lt;code&gt;conj&lt;/code&gt;) and additional parameters (in this case &lt;code&gt;[[&#34;JAFA017&#34;] [1 1]]&lt;/code&gt;), reads the current value the atom refers to, applies the function to the value, and tells the atom to point to the value returned. These steps happen atomically. But what if when we want to mutate two identities in a transaction? We can&amp;#8217;t use two atoms as there is no way to &lt;code&gt;swap!&lt;/code&gt; on both of them together. In this case we use &lt;code&gt;refs&lt;/code&gt; and the &lt;code&gt;dosync&lt;/code&gt; function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;ref &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;{}))&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;empty-parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;ref &lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;{}))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So now we have two &lt;code&gt;refs&lt;/code&gt;. &lt;code&gt;vehicles&lt;/code&gt; that have entered the garage will be tracked in a map using the licence plate as the key and the location assigned as the value. &lt;code&gt;empty-parking-spaces&lt;/code&gt; is a set in which we will store all available parking spaces using vectors like &lt;code&gt;[1 3]&lt;/code&gt; which would indicate a free space on level 1, parking space 3. Every time a vehicle enters the garage, we add it to &lt;code&gt;vehicles&lt;/code&gt; and remove the parking space that was allocated from &lt;code&gt;empty-parking-spaces&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;enter-garage!&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Simulates a vehicle entering the garage. Return the state of the garage if&lt;/span&gt;
&lt;span class=&#34;tok-s&#34;&gt;   there is still free space, nil if no empty parking space exists.&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;dosync&lt;/span&gt;
   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;if-let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;parking-space&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;first &lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;empty-parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
     &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;do&lt;/span&gt;
       &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;alter &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;empty-parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-nb&#34;&gt;disj &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;parking-space&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;alter &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt; &lt;span class=&#34;tok-nb&#34;&gt;assoc &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;parking-space&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Similarly for &lt;code&gt;exit-garage!&lt;/code&gt; we remove the entry from &lt;code&gt;vehicles&lt;/code&gt; and add the location previously occupied by the vehicle back to &lt;code&gt;empty-parking-spaces&lt;/code&gt; so we can use it again in the future:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;exit-garage!&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Simulates a vehicle exiting the garage. Returns the state of the garage if&lt;/span&gt;
&lt;span class=&#34;tok-s&#34;&gt;   such a vehicle exists in the garage, nil otherwise.&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;dosync&lt;/span&gt;
   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;if-let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;vehicle-location&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;locate-vehicle&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
     &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;do&lt;/span&gt;
       &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;alter &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;empty-parking-spaces&lt;/span&gt; &lt;span class=&#34;tok-nb&#34;&gt;conj &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;vehicle-location&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;alter &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt; &lt;span class=&#34;tok-nb&#34;&gt;dissoc &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Notice that with &lt;code&gt;dosync&lt;/code&gt; the operations are happening within a transaction, so we don&amp;#8217;t need to worry about two cars potentially getting assigned the same parking space. Finally, it is trivial to define the operations &lt;code&gt;locate-vehicle&lt;/code&gt; and &lt;code&gt;number-of-free-parking-spaces&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;locate-vehicle&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Given a licence plate, returns the location of a vehicle as a vector with the&lt;/span&gt;
&lt;span class=&#34;tok-s&#34;&gt;   level and parking space number, nil if not present.&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;vehicles&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;licence-plate&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;number-of-free-parking-spaces&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Returns the current number of free parking spaces in the garage.&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[]&lt;/span&gt;
   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;count &lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;empty-parking-spaces&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you want to take a look at the complete sources they&amp;#8217;re on &lt;a href=&#34;https://github.com/anthonygalea/garage-simulation&#34;&gt;GitHub&lt;/a&gt;. In the &lt;a href=&#34;http://www.anthony-galea.com/blog/post/hello-parking-garage-meet-clojure.spec/&#34;&gt;next post&lt;/a&gt; we will take a look at how we can apply clojure.spec.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Datomic in a simple use case</title>
      <link>http://www.anthony-galea.com/blog/post/using-datomic-in-a-simple-use-case/</link>
      <pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/using-datomic-in-a-simple-use-case/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In a &lt;a href=&#34;http://www.anthony-galea.com/blog/post/getting-started-with-compojure-api&#34;&gt;previous post&lt;/a&gt;, we started building an account service in Clojure using &lt;a href=&#34;https://github.com/metosin/compojure-api&#34;&gt;compojure-api&lt;/a&gt;. In this post, we will add persistence using &lt;a href=&#34;http://www.datomic.com/&#34;&gt;Datomic&lt;/a&gt;. The sources are available on &lt;a href=&#34;http://github.com/anthonygalea/account-service&#34;&gt;GitHub&lt;/a&gt;. For an introduction to Datomic as well as the value-proposition behind it, you should take a look at the &lt;a href=&#34;http://www.datomic.com/training.html&#34;&gt;training resources on the Datomic website&lt;/a&gt;. If the videos are too much of an investment at this stage, you might want to take a look at Daniel Higginbotham&amp;#8217;s article &lt;a href=&#34;http://www.flyingmachinestudios.com/programming/datomic-for-five-year-olds/&#34;&gt;Datomic for Five Year Olds&lt;/a&gt;. Just as a quick reminder, the service should support creating accounts and transferring money from one account to another. Here are the Swagger docs for the API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://www.anthony-galea.com/images/2016-06-16-swagger.png&#34; alt=&#34;2016 06 16 swagger&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_the_schema&#34;&gt;The Schema&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We will start by defining the schema for Datomic. Under the &lt;code&gt;resources&lt;/code&gt; folder, create a file named &lt;code&gt;schema.dtm&lt;/code&gt;. This will hold the Datomic schema definition. An account only has one field: &lt;code&gt;balance&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/id&lt;/span&gt;                 &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;db/id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db.part/db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/ident&lt;/span&gt;              &lt;span class=&#34;tok-ss&#34;&gt;:account/balance&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/valueType&lt;/span&gt;          &lt;span class=&#34;tok-ss&#34;&gt;:db.type/bigdec&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/cardinality&lt;/span&gt;        &lt;span class=&#34;tok-ss&#34;&gt;:db.cardinality/one&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/doc&lt;/span&gt;                &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;An account&amp;#39;s balance&amp;quot;&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db.install/_attribute&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:db.part/db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For transfers we need: &lt;code&gt;from-account&lt;/code&gt;, &lt;code&gt;to-account&lt;/code&gt;, &lt;code&gt;amount&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/id&lt;/span&gt;                 &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;db/id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db.part/db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/ident&lt;/span&gt;              &lt;span class=&#34;tok-ss&#34;&gt;:transfer/amount&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/valueType&lt;/span&gt;          &lt;span class=&#34;tok-ss&#34;&gt;:db.type/bigdec&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/cardinality&lt;/span&gt;        &lt;span class=&#34;tok-ss&#34;&gt;:db.cardinality/one&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/doc&lt;/span&gt;                &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;A transaction&amp;#39;s amount&amp;quot;&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db.install/_attribute&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:db.part/db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/id&lt;/span&gt;                 &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;db/id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db.part/db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/ident&lt;/span&gt;              &lt;span class=&#34;tok-ss&#34;&gt;:transfer/from-account&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/valueType&lt;/span&gt;          &lt;span class=&#34;tok-ss&#34;&gt;:db.type/ref&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/cardinality&lt;/span&gt;        &lt;span class=&#34;tok-ss&#34;&gt;:db.cardinality/one&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/doc&lt;/span&gt;                &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;An account from which to transfer money&amp;quot;&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db.install/_attribute&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:db.part/db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/id&lt;/span&gt;                 &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;db/id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db.part/db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/ident&lt;/span&gt;              &lt;span class=&#34;tok-ss&#34;&gt;:transfer/to-account&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/valueType&lt;/span&gt;          &lt;span class=&#34;tok-ss&#34;&gt;:db.type/ref&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/cardinality&lt;/span&gt;        &lt;span class=&#34;tok-ss&#34;&gt;:db.cardinality/one&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/doc&lt;/span&gt;                &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;An account to which to transfer money&amp;quot;&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db.install/_attribute&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:db.part/db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We will also use an additional field called &lt;code&gt;status&lt;/code&gt; to keep track of what happened to a transfer request:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/id&lt;/span&gt;                 &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;db/id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db.part/db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/ident&lt;/span&gt;              &lt;span class=&#34;tok-ss&#34;&gt;:transfer/status&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/valueType&lt;/span&gt;          &lt;span class=&#34;tok-ss&#34;&gt;:db.type/ref&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/cardinality&lt;/span&gt;        &lt;span class=&#34;tok-ss&#34;&gt;:db.cardinality/one&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/doc&lt;/span&gt;                &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;The status of a transfer&amp;quot;&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db.install/_attribute&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:db.part/db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/add&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;db/id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db.part/user&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:db/ident&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/pending&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/add&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;db/id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db.part/user&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:db/ident&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/success&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/add&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;db/id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db.part/user&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:db/ident&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/insufficient-funds&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/add&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;db/id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db.part/user&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:db/ident&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/no-such-from-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/add&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;db/id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db.part/user&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:db/ident&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/no-such-to-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The intention is for requests to start in status &lt;code&gt;pending&lt;/code&gt; and transition them accordingly based on the outcome of the transaction:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://www.anthony-galea.com/images/2016-06-16-status.png&#34; alt=&#34;2016 06 16 status&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Next create a file under &lt;code&gt;src/account_service&lt;/code&gt; called &lt;code&gt;db.clj&lt;/code&gt;. In it we &lt;code&gt;:require datomic.api&lt;/code&gt; and define the connection to Datomic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;ns &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account-service.db&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:require&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;datomic.api&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]))&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;uri&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;datomic:free://localhost:4334/account-service-db&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/connect&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_testing_with_midje&#34;&gt;Testing with Midje&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Before we implement any of the functionality to deal with datomic let&amp;#8217;s write some tests. Create a file named &lt;code&gt;db_test.clj&lt;/code&gt; under &lt;code&gt;test/account_service&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;ns &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account-service.db-test&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:require&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account-service.db&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:refer&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:all&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;midje.sweet&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:refer&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:all&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;datomic.api&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Notice we use the &lt;a href=&#34;https://github.com/marick/Midje&#34;&gt;midje&lt;/a&gt; and Datomic libraries for our tests so add these dependencies in &lt;code&gt;project.clj&lt;/code&gt;, as well as the &lt;code&gt;lein-datomic&lt;/code&gt; and &lt;code&gt;lein-midje&lt;/code&gt; plugins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defproject &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account-service&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;0.1.0-SNAPSHOT&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:dependencies&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;org.clojure/clojure&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;1.8.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
                 &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;com.datomic/datomic-free&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;0.9.5372&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
                 &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;clj-time&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;0.12.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
                 &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;expectations&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;2.1.8&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
                 &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;metosin/compojure-api&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;1.1.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:plugins&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;lein-datomic&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;0.2.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:ring&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:handler&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;account-service.core/app&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:datomic&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:schemas&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;resources&amp;quot;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;schema.dtm&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]}&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:profiles&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:dev&lt;/span&gt;
             &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:plugins&lt;/span&gt;      &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;lein-ring&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;0.9.7&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
                             &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;lein-midje&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;3.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]&lt;/span&gt;
              &lt;span class=&#34;tok-ss&#34;&gt;:dependencies&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;javax.servlet/servlet-api&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;2.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
                             &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;cheshire&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;5.6.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
                             &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;ring/ring-mock&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;0.3.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
                             &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;midje&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;1.8.3&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]&lt;/span&gt;
              &lt;span class=&#34;tok-ss&#34;&gt;:datomic&lt;/span&gt;      &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:config&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;resources/free-transactor.properties&amp;quot;&lt;/span&gt;
                             &lt;span class=&#34;tok-ss&#34;&gt;:db-uri&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;datomic:free://localhost:4334/account-service-db&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}}})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Having defined our dependencies, let&amp;#8217;s create a function that will allow the tests to work with an &lt;code&gt;in-memory database&lt;/code&gt; in &lt;code&gt;core_test.clj&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;create-empty-in-memory-db&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;uri&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;datomic:mem://account-service-test-db&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/delete-database&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/create-database&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/connect&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;tok-nv&#34;&gt;schema&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;read-string&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;slurp &lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;resources/schema.dtm&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))]&lt;/span&gt;
      &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/transact&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Every time we call this function we are dropping the database, recreating it and applying the schema. Next, let&amp;#8217;s write our first test for creating accounts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;fact&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Adding one account should allow us to find that account using the returned id&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;with-redefs&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;create-empty-in-memory-db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;add-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;161.80&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})]&lt;/span&gt;
      &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;get-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;161.80&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This says we should be able to add an account to the system by providing an initial balance using the function &lt;code&gt;add-account&lt;/code&gt;. Also, we should be able to find said account using the function &lt;code&gt;get-account&lt;/code&gt;, via the id returned by &lt;code&gt;add-account&lt;/code&gt;. &lt;code&gt;with-redefs&lt;/code&gt; temporarily redefines &lt;code&gt;conn&lt;/code&gt; in &lt;code&gt;db.clj&lt;/code&gt; so that the tests use the in-memory database. Before implementing these two methods let&amp;#8217;s define one more test:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;fact&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Adding multiple accounts should allow us to find all those accounts&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;with-redefs&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;create-empty-in-memory-db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account-1&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;add-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;12.34&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;
          &lt;span class=&#34;tok-nv&#34;&gt;account-2&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;add-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;56.78&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;
          &lt;span class=&#34;tok-nv&#34;&gt;account-3&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;add-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;12.34&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})]&lt;/span&gt;
      &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;get-accounts&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;account-1&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;12.34&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;
                         &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;account-2&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;56.78&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;
                         &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;account-3&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;12.34&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}])))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our second test says we should be able to add multiple accounts to the system, and subsequently be able to find all such accounts using the function &lt;code&gt;get-accounts&lt;/code&gt;. We can run these tests by switching to the root folder in the shell and executing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;$ lein midje&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Of course, the tests fail so let&amp;#8217;s proceed to the implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_accounts&#34;&gt;Accounts&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Open &lt;code&gt;db.clj&lt;/code&gt; and add the &lt;code&gt;add-account&lt;/code&gt; function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;add-account&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Adds an account&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;balance&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;bigdec&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;tok-nv&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;second &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:tx-data&lt;/span&gt;
                     &lt;span class=&#34;tok-o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/transact&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt;
                                  &lt;span class=&#34;tok-p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/id&lt;/span&gt;           &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/tempid&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:db.part/user&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                                    &lt;span class=&#34;tok-ss&#34;&gt;:account/balance&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;balance&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}])))]&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt;      &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:e&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:v&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)}))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We use the datomic &lt;code&gt;transact&lt;/code&gt; function to add an account with a balance. Next we write our &lt;code&gt;get-account&lt;/code&gt; and &lt;code&gt;get-accounts&lt;/code&gt; functions to retrieve accounts we create using &lt;code&gt;add-account&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;get-account&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Retrieves an account given it&amp;#39;s id&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;first &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/q&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:find&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;?id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;?balance&lt;/span&gt;
                          &lt;span class=&#34;tok-ss&#34;&gt;:in&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;?id&lt;/span&gt;
                          &lt;span class=&#34;tok-ss&#34;&gt;:where&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;?id&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:account/balance&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;?balance&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]&lt;/span&gt;
                        &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/db&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;tok-nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))]&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt;      &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;first &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;second &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)}))&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;get-accounts&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Retrieves all accounts&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/q&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:find&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;?a&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;?balance&lt;/span&gt;
                   &lt;span class=&#34;tok-ss&#34;&gt;:where&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;?a&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:account/balance&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;?balance&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]&lt;/span&gt;
                 &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/db&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))]&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;map &lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;hash-map &lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;first &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;second &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We use the Datomic &lt;code&gt;q&lt;/code&gt; function to perform queries. The query language used is &lt;a href=&#34;https://en.wikipedia.org/wiki/Datalog&#34;&gt;datalog&lt;/a&gt;. For an overview of &lt;code&gt;datalog&lt;/code&gt; you can check out &lt;a href=&#34;http://www.learndatalogtoday.org/&#34;&gt;learndatalogtoday.org&lt;/a&gt;. At this point, you should be able to run &lt;code&gt;lein midje&lt;/code&gt; in the shell and the tests should be green.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_transfers&#34;&gt;Transfers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Moving on to transfers let&amp;#8217;s write some more tests in &lt;code&gt;db_test.clj&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;fact&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Making a transfer between two valid accounts with sufficient funds should succeed&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;with-redefs&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;create-empty-in-memory-db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;add-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;1618.00&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;
            &lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;add-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;200.00&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})]&lt;/span&gt;
      &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;make-transfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:from-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                      &lt;span class=&#34;tok-ss&#34;&gt;:to-account&lt;/span&gt;   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                      &lt;span class=&#34;tok-ss&#34;&gt;:amount&lt;/span&gt;       &lt;span class=&#34;tok-mf&#34;&gt;12.34&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;contains&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:from-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                                                           &lt;span class=&#34;tok-ss&#34;&gt;:to-account&lt;/span&gt;   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                                                           &lt;span class=&#34;tok-ss&#34;&gt;:amount&lt;/span&gt;       &lt;span class=&#34;tok-mf&#34;&gt;12.34&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;
                                                           &lt;span class=&#34;tok-ss&#34;&gt;:status&lt;/span&gt;       &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/success&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;
                      &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;get-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;tok-mf&#34;&gt;1618.00&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;12.34&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)}&lt;/span&gt;
                      &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;get-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;+ &lt;/span&gt;&lt;span class=&#34;tok-mf&#34;&gt;200.00&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;12.34&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)})))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This tests starts by creating two accounts in the system and then proceeds to make a transfer between these accounts. Since the accounts are valid we expect that the transfer succeeds i.e. status is set to &lt;code&gt;transfer.status/success&lt;/code&gt;. Let&amp;#8217;s now proceed to write some more tests for cases where the transfer fails:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;fact&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Making a transfer from an account with insufficient funds should fail with status insufficient-funds&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;with-redefs&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;create-empty-in-memory-db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;add-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;18.00&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;
            &lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;add-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;200.00&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;
              &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;make-transfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:from-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:to-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:amount&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;100.23&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})]&lt;/span&gt;
      &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;get-transfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt;           &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                                        &lt;span class=&#34;tok-ss&#34;&gt;:from-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                                        &lt;span class=&#34;tok-ss&#34;&gt;:to-account&lt;/span&gt;   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                                        &lt;span class=&#34;tok-ss&#34;&gt;:amount&lt;/span&gt;       &lt;span class=&#34;tok-mf&#34;&gt;100.23&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;
                                        &lt;span class=&#34;tok-ss&#34;&gt;:status&lt;/span&gt;       &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/insufficient-funds&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})))&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;fact&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Making a transfer from an account which doesn&amp;#39;t exist should fail with status no-such-from-account&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;with-redefs&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;create-empty-in-memory-db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;add-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;180.00&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;
            &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;make-transfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:from-account&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;928374&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:to-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:amount&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;80.23&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})]&lt;/span&gt;
      &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;get-transfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt;           &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                                        &lt;span class=&#34;tok-ss&#34;&gt;:from-account&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;928374&lt;/span&gt;
                                        &lt;span class=&#34;tok-ss&#34;&gt;:to-account&lt;/span&gt;   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                                        &lt;span class=&#34;tok-ss&#34;&gt;:amount&lt;/span&gt;       &lt;span class=&#34;tok-mf&#34;&gt;80.23&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;
                                        &lt;span class=&#34;tok-ss&#34;&gt;:status&lt;/span&gt;       &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/no-such-from-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})))&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;fact&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Making a transfer to an account which doesn&amp;#39;t exist should fail with status no-such-to-account&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;with-redefs&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;create-empty-in-memory-db&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;add-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;138.00&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;
              &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;make-transfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:from-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:to-account&lt;/span&gt; &lt;span class=&#34;tok-mi&#34;&gt;98234619&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:amount&lt;/span&gt; &lt;span class=&#34;tok-mf&#34;&gt;100.23&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})]&lt;/span&gt;
      &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;get-transfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt;           &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                                        &lt;span class=&#34;tok-ss&#34;&gt;:from-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                                        &lt;span class=&#34;tok-ss&#34;&gt;:to-account&lt;/span&gt;   &lt;span class=&#34;tok-mi&#34;&gt;98234619&lt;/span&gt;
                                        &lt;span class=&#34;tok-ss&#34;&gt;:amount&lt;/span&gt;       &lt;span class=&#34;tok-mf&#34;&gt;100.23&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;M&lt;/span&gt;
                                        &lt;span class=&#34;tok-ss&#34;&gt;:status&lt;/span&gt;       &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/no-such-to-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When we make a transfer we want to simultaneously update the transfer status as well as the balances in the respective accounts (if the transfer is possible) in a transaction. We implement this transaction using a datomic &lt;code&gt;database function&lt;/code&gt; which we define in our &lt;code&gt;schema.dtm&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/id&lt;/span&gt;    &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;db/id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db.part/user&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/ident&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:make-transfer&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/doc&lt;/span&gt;   &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Performs a transfer between two accounts&amp;quot;&lt;/span&gt;
 &lt;span class=&#34;tok-ss&#34;&gt;:db/fn&lt;/span&gt;    &lt;span class=&#34;tok-o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;db/fn&lt;/span&gt;
             &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:lang&lt;/span&gt;   &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;clojure&amp;quot;&lt;/span&gt;
              &lt;span class=&#34;tok-ss&#34;&gt;:params&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer-id&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;amount&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
              &lt;span class=&#34;tok-ss&#34;&gt;:code&lt;/span&gt;   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;datomic.api/entity&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                            &lt;span class=&#34;tok-nv&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;datomic.api/entity&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                            &lt;span class=&#34;tok-nv&#34;&gt;f-balance&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:account/balance&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                            &lt;span class=&#34;tok-nv&#34;&gt;t-balance&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:account/balance&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
                        &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;cond&lt;/span&gt;
                          &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;nil? &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;f-balance&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/add&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer-id&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:transfer/status&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/no-such-from-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]&lt;/span&gt;
                          &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;nil? &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;t-balance&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/add&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer-id&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:transfer/status&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/no-such-to-account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]&lt;/span&gt;
                          &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;&amp;lt; &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;f-balance&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;amount&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/add&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer-id&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:transfer/status&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/insufficient-funds&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]&lt;/span&gt;
                          &lt;span class=&#34;tok-ss&#34;&gt;:else&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/add&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer-id&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:transfer/status&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/success&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
                                &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/add&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;from-account&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:account/balance&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;f-balance&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;amount&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
                                &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/add&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;to-account&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:account/balance&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;+ &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;t-balance&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;amount&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]]))}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We then use this &lt;code&gt;database function&lt;/code&gt; in &lt;code&gt;db.clj&lt;/code&gt; by passing it to &lt;code&gt;d/transact&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;make-transfer&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Performs a transfer&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;amount&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;bigdec&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:amount&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;
           &lt;span class=&#34;tok-nv&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;second &lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:tx-data&lt;/span&gt;
                        &lt;span class=&#34;tok-o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/transact&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt;
                                     &lt;span class=&#34;tok-p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:db/id&lt;/span&gt;                 &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/tempid&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:db.part/user&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                                       &lt;span class=&#34;tok-ss&#34;&gt;:transfer/from-account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:from-account&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                                       &lt;span class=&#34;tok-ss&#34;&gt;:transfer/to-account&lt;/span&gt;   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:to-account&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                                       &lt;span class=&#34;tok-ss&#34;&gt;:transfer/amount&lt;/span&gt;       &lt;span class=&#34;tok-nv&#34;&gt;amount&lt;/span&gt;
                                       &lt;span class=&#34;tok-ss&#34;&gt;:transfer/status&lt;/span&gt;       &lt;span class=&#34;tok-ss&#34;&gt;:transfer.status/pending&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}])))]&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;d/transact&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:make-transfer&lt;/span&gt;
                               &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:e&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                               &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:from-account&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                               &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:to-account&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                               &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:amount&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]]))&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;get-transfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:e&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now let&amp;#8217;s wire the functions we created in &lt;code&gt;db.clj&lt;/code&gt; to our API. Go to &lt;code&gt;core.clj&lt;/code&gt; and modify the endpoint definitions as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;app&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;api&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:swagger&lt;/span&gt;
     &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:ui&lt;/span&gt;   &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;
      &lt;span class=&#34;tok-ss&#34;&gt;:spec&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;/swagger.json&amp;quot;&lt;/span&gt;
      &lt;span class=&#34;tok-ss&#34;&gt;:data&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:info&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:title&lt;/span&gt;       &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Account Service&amp;quot;&lt;/span&gt;
                    &lt;span class=&#34;tok-ss&#34;&gt;:description&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;A simple service for handling accounts and transfers between the accounts.&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;
             &lt;span class=&#34;tok-ss&#34;&gt;:tags&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:name&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}]}}}&lt;/span&gt;

    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;/api&amp;quot;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[]&lt;/span&gt;
             &lt;span class=&#34;tok-ss&#34;&gt;:tags&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;

             &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;/account&amp;quot;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[]&lt;/span&gt;
                   &lt;span class=&#34;tok-ss&#34;&gt;:return&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;Account&lt;/span&gt;
                   &lt;span class=&#34;tok-ss&#34;&gt;:body&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;describe&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;NewAccount&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;new account&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
                   &lt;span class=&#34;tok-ss&#34;&gt;:summary&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Creates an account in the system with an initial balance&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;add-account&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))&lt;/span&gt;

             &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;/account/:id&amp;quot;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[]&lt;/span&gt;
                  &lt;span class=&#34;tok-ss&#34;&gt;:path-params&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:-&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;Long&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
                  &lt;span class=&#34;tok-ss&#34;&gt;:return&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/maybe&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;Account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;tok-ss&#34;&gt;:summary&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Returns all details relevant to an account&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;get-account&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))&lt;/span&gt;

             &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;/transfer&amp;quot;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[]&lt;/span&gt;
                   &lt;span class=&#34;tok-ss&#34;&gt;:return&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;Transfer&lt;/span&gt;
                   &lt;span class=&#34;tok-ss&#34;&gt;:body&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;describe&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;NewTransfer&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;new transfer&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
                   &lt;span class=&#34;tok-ss&#34;&gt;:summary&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Requests a transfer between two accounts&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;make-transfer&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))&lt;/span&gt;

             &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;/accounts&amp;quot;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[]&lt;/span&gt;
                  &lt;span class=&#34;tok-ss&#34;&gt;:return&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;Account&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
                  &lt;span class=&#34;tok-ss&#34;&gt;:summary&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Gets all accounts&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;get-accounts&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At this point you should be able to go to &lt;a href=&#34;http://localhost:3000/index.html&#34; class=&#34;bare&#34;&gt;http://localhost:3000/index.html&lt;/a&gt; in your browser and interact with the service:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://www.anthony-galea.com/images/2016-06-16-swagger.png&#34; alt=&#34;2016 06 16 swagger&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this post, we have extended the API from an &lt;a href=&#34;http://www.anthony-galea.com/blog/post/getting-started-with-compojure-api&#34;&gt;earlier post&lt;/a&gt; to use Datomic for persistence. You can find all the source code on &lt;a href=&#34;http://github.com/anthonygalea/account-service&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Solutions to 4Clojure Medium Problems</title>
      <link>http://www.anthony-galea.com/blog/post/solutions-to-4clojure-medium-problems/</link>
      <pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/solutions-to-4clojure-medium-problems/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is the third post on solutions to &lt;a href=&#34;http://www.4clojure.com&#34;&gt;4Clojure&lt;/a&gt; problems. Once again all solutions are on &lt;a href=&#34;https://github.com/anthonygalea/solutions-4clojure&#34;&gt;GitHub&lt;/a&gt;, and if you have any suggestions for alternative solutions I would love to hear from you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_43_reverse_interleave&#34;&gt;43. Reverse Interleave&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which reverses the interleave process into x number of subsequences.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn reverse-interleave [s n]
  ((fn reverse-interleave [s n i]
     (if (= i 1)
       (list (take-nth n s))
       (cons (take-nth n s) (reverse-interleave (rest s) n (dec i)))))
   s n n))

[(= (reverse-interleave [1 2 3 4 5 6] 2) &#39;((1 3 5) (2 4 6)))
 (= (reverse-interleave (range 9) 3) &#39;((0 3 6) (1 4 7) (2 5 8)))
 (= (reverse-interleave (range 10) 5) &#39;((0 5) (1 6) (2 7) (3 8) (4 9)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_44_rotate_sequence&#34;&gt;44. Rotate Sequence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which can rotate a sequence in either direction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn rotate-sequence [n s]
  (let [c (mod n (count s))]
    (concat (drop c s) (take c s))))

[(= (rotate-sequence 2 [1 2 3 4 5]) &#39;(3 4 5 1 2))
 (= (rotate-sequence -2 [1 2 3 4 5]) &#39;(4 5 1 2 3))
 (= (rotate-sequence 6 [1 2 3 4 5]) &#39;(2 3 4 5 1))
 (= (rotate-sequence 1 &#39;(:a :b :c)) &#39;(:b :c :a))
 (= (rotate-sequence -4 &#39;(:a :b :c)) &#39;(:c :a :b))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_46_flipping_out&#34;&gt;46. Flipping out&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a higher-order function which flips the order of the arguments of an input function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn flipping-out [f]
  (fn [a b]
    (f b a)))

[(= 3 ((flipping-out nth) 2 [1 2 3 4 5]))
 (= true ((flipping-out &amp;gt;) 7 8))
 (= 4 ((flipping-out quot) 2 8))
 (= [1 2 3] ((flipping-out take) [1 2 3 4 5] 3))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_50_split_by_type&#34;&gt;50. Split by Type&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which takes a sequence consisting of items with different types and splits them up into a set of homogeneous sub-sequences. The internal order of each sub-sequence should be maintained, but the sub-sequences themselves can be returned in any order (this is why &#39;set&#39; is used in the test cases).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn split-by-type [v]
  (vals (group-by #(type %) v)))

[(= (set (split-by-type [1 :a 2 :b 3 :c])) #{[1 2 3] [:a :b :c]})
 (= (set (split-by-type [:a &#34;foo&#34;  &#34;bar&#34; :b])) #{[:a :b] [&#34;foo&#34; &#34;bar&#34;]})
 (= (set (split-by-type [[1 2] :a [3 4] 5 6 :b])) #{[[1 2] [3 4]] [:a :b] [5 6]})]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_54_partition_a_sequence&#34;&gt;54. Partition a Sequence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns a sequence of lists of x items each. Lists of less than x items should not be returned.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn partition-a-sequence [n s]
  (map #(take n (drop % s))
       (range 0
              (* (quot (count s) n) n)
              n)))

[(= (partition-a-sequence 3 (range 9)) &#39;((0 1 2) (3 4 5) (6 7 8)))
 (= (partition-a-sequence 2 (range 8)) &#39;((0 1) (2 3) (4 5) (6 7)))
 (= (partition-a-sequence 3 (range 8)) &#39;((0 1 2) (3 4 5)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_55_count_occurrences&#34;&gt;55. Count Occurrences&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns a map containing the number of occurrences of each distinct item in a sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn count-occurrences [s]
  (into {} (map #(vector (first %) (count (second %))) (group-by identity s))))

[(= (count-occurrences [1 1 2 3 2 1 1]) {1 4, 2 2, 3 1})
 (= (count-occurrences [:b :a :b :a :b]) {:a 2, :b 3})
 (= (count-occurrences &#39;([1 2] [1 3] [1 3])) {[1 2] 1, [1 3] 2})]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_56_find_distinct_items&#34;&gt;56. Find Distinct Items&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which removes the duplicates from a sequence. Order of the items must be maintained.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn find-distinct-items [s]
  (sort-by #(.indexOf s %)
           (keys (group-by identity s))))

[(= (find-distinct-items [1 2 1 3 1 2 4]) [1 2 3 4])
 (= (find-distinct-items [:a :a :b :b :c :c]) [:a :b :c])
 (= (find-distinct-items &#39;([2 4] [1 2] [1 3] [1 3])) &#39;([2 4] [1 2] [1 3]))
 (= (find-distinct-items (range 50)) (range 50))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_58_function_composition&#34;&gt;58. Function Composition&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which allows you to create function compositions. The parameter list should take a variable number of functions, and create a function that applies them from right-to-left.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn function-composition [&amp;amp; functions]
  (fn [&amp;amp; args]
    (first
      (reduce (fn [result function]
                (list (apply function result)))
              args
              (reverse functions)))))

[(= [3 2 1] ((function-composition rest reverse) [1 2 3 4]))
 (= 5 ((function-composition (partial + 3) second) [1 2 3 4]))
 (= true ((function-composition zero? #(mod % 8) +) 3 5 7 9))
 (= &#34;HELLO&#34; ((function-composition #(.toUpperCase %) #(apply str %) take) 5 &#34;hello world&#34;))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_59_juxtaposition&#34;&gt;59. Juxtaposition&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Take a set of functions and return a new function that takes a variable number of arguments and returns a sequence containing the result of applying each function left-to-right to the argument list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn juxtaposition [&amp;amp; functions]
  (fn [&amp;amp; parameters]
    (map #(apply % parameters) functions)))

[(= [21 6 1] ((juxtaposition + max min) 2 3 5 1 6 4))
 (= [&#34;HELLO&#34; 5] ((juxtaposition #(.toUpperCase %) count) &#34;hello&#34;))
 (= [2 6 4] ((juxtaposition :a :c :b) {:a 2, :b 4, :c 6, :d 8 :e 10}))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_60_sequence_reductions&#34;&gt;60. Sequence Reductions&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which behaves like reduce, but returns each intermediate value of the reduction. Your function must accept either two or three arguments, and the return sequence must be lazy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn sequence-reductions
  ([f s]
   (sequence-reductions f (first s) (rest s)))
  ([f i s]
   (cons i
         (lazy-seq
           (if (not (empty? s))
             (sequence-reductions f
                                  (f i (first s))
                                  (rest s)))))))

[(= (take 5 (sequence-reductions + (range))) [0 1 3 6 10])
 (= (sequence-reductions conj [1] [2 3 4]) [[1] [1 2] [1 2 3] [1 2 3 4]])
 (= (last (sequence-reductions * 2 [3 4 5])) (reduce * 2 [3 4 5]) 120)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_65_black_box_testing&#34;&gt;65. Black Box Testing&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Clojure has many sequence types, which act in subtly different ways. The core functions typically convert them into a uniform &#34;sequence&#34; type and work with them that way, but it can be important to understand the behavioral and performance differences so that you know which kind is appropriate for your application. Write a function which takes a collection and returns one of :map, :set, :list, or :vector - describing the type of collection it was given. You won&amp;#8217;t be allowed to inspect their class or use the built-in predicates like list? - the point is to poke at them and understand their behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn black-box-testing [s]
  (let [result (conj (empty s) [1 2] [1 2] [1 3])]
    (cond
      (= 1 (count result)) :map
      (= 2 (count result)) :set
      (= [1 2] (first result)) :vector
      :else :list)))

[(= :map (black-box-testing {:a 1, :b 2}))
 (= :list (black-box-testing (range (rand-int 20))))
 (= :vector (black-box-testing [1 2 3 4 5 6]))
 (= :set (black-box-testing #{10 (rand-int 5)}))
 (= [:map :set :vector :list] (map black-box-testing [{} #{} [] ()]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_69_merge_with_a_function&#34;&gt;69. Merge with a Function&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which takes a function f and a variable number of maps. Your function should return a map that consists of the rest of the maps conj-ed onto the first. If a key occurs in more than one map, the mapping(s) from the latter (left-to-right) should be combined with the mapping in the result by calling (f val-in-result val-in-latter)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn merge-with-a-function [f &amp;amp; m]
  (into {}
    (map (fn [e]
           (if (&amp;gt; (count (val e)) 1)
               [(key e) (reduce f (map second (val e)))]
               [(key e) (second (first (val e)))]))
      (group-by first (apply concat m)))))

[(= (merge-with-a-function * {:a 2, :b 3, :c 4} {:a 2} {:b 2} {:c 5})
    {:a 4, :b 6, :c 20})
 (= (merge-with-a-function - {1 10, 2 20} {1 3, 2 10, 3 15})
    {1 7, 2 10, 3 15})
 (= (merge-with-a-function concat {:a [3], :b [6]} {:a [4 5], :c [8 9]} {:b [7]})
    {:a [3 4 5], :b [6 7], :c [8 9]})]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_70_word_sorting&#34;&gt;70. Word Sorting&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function that splits a sentence up into a sorted list of words. Capitalization should not affect sort order and punctuation should be ignored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn word-sorting [s]
  (into []
    (sort-by clojure.string/lower-case
      (clojure.string/split (apply str
                                   (take (dec (count s)) s))
                            #&#34;\s&#34;))))

[(= (word-sorting  &#34;Have a nice day.&#34;)
    [&#34;a&#34; &#34;day&#34; &#34;Have&#34; &#34;nice&#34;])
 (= (word-sorting &#34;Clojure is a fun language!&#34;)
    [&#34;a&#34; &#34;Clojure&#34; &#34;fun&#34; &#34;is&#34; &#34;language&#34;])
 (= (word-sorting &#34;Fools fall for foolish follies.&#34;)
    [&#34;fall&#34; &#34;follies&#34; &#34;foolish&#34; &#34;Fools&#34; &#34;for&#34;])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_74_filter_perfect_squares&#34;&gt;74. Filter Perfect Squares&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Given a string of comma separated integers, write a function which returns a new comma separated string that only contains the numbers which are perfect squares.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn filter-perfect-squares [s]
  (letfn [(perfect-square? [n]
            (== (Math/sqrt n) (int (Math/sqrt n))))]
    (clojure.string/join &#34;,&#34;
                         (filter perfect-square?
                                 (clojure.string/split s #&#34;,&#34;)))))

[(= (filter-perfect-squares &#34;4,5,6,7,8,9&#34;) &#34;4,9&#34;)
 (= (filter-perfect-squares &#34;15,16,25,36,37&#34;) &#34;16,25,36&#34;)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_75_euler_s_totient_function&#34;&gt;75. Euler&amp;#8217;s Totient Function&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Two numbers are coprime if their greatest common divisor equals 1. Euler&amp;#8217;s totient function f(x) is defined as the number of positive integers less than x which are coprime to x. The special case f(1) equals 1. Write a function which calculates Euler&amp;#8217;s totient function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn eulers-totient-function [n]
  (letfn [(gcd [a b]
            (if (= b 0)
              a
              (recur b (mod a b))))]
  (count
    (filter #(= 1 (gcd n %)) (range n)))))

[(= (eulers-totient-function 1) 1)
 (= (eulers-totient-function 10) (count &#39;(1 3 7 9)) 4)
 (= (eulers-totient-function 40) 16)
 (= (eulers-totient-function 99) 60)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_76_intro_to_trampoline&#34;&gt;76. Intro to Trampoline&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The trampoline function takes a function f and a variable number of parameters. Trampoline calls f with any parameters that were supplied. If f returns a function, trampoline calls that function with no arguments. This is repeated, until the return value is not a function, and then trampoline returns that non-function value. This is useful for implementing mutually recursive algorithms in a way that won&amp;#8217;t consume the stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def intro-to-trampoline [1 3 5 7 9 11])

[(= intro-to-trampoline
    (letfn
      [(foo [x y] #(bar (conj x y) y))
       (bar [x y] (if (&amp;gt; (last x) 10)
                    x
                    #(foo x (+ 2 y))))]
      (trampoline foo [] 1)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_77_anagram_finder&#34;&gt;77. Anagram Finder&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which finds all the anagrams in a vector of words. A word x is an anagram of word y if all the letters in x can be rearranged in a different order to form y. Your function should return a set of sets, where each sub-set is a group of words which are anagrams of each other. Each sub-set should have at least two words. Words without any anagrams should not be included in the result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn anagram-finder [s]
  (-&amp;gt;&amp;gt; (group-by sort s)
       (filter #(&amp;gt; (count (val %)) 1))
       (map #(set (val %)))
       (set)))

[(= (anagram-finder [&#34;meat&#34; &#34;mat&#34; &#34;team&#34; &#34;mate&#34; &#34;eat&#34;])
    #{#{&#34;meat&#34; &#34;team&#34; &#34;mate&#34;}})
 (= (anagram-finder [&#34;veer&#34; &#34;lake&#34; &#34;item&#34; &#34;kale&#34; &#34;mite&#34; &#34;ever&#34;])
   #{#{&#34;veer&#34; &#34;ever&#34;} #{&#34;lake&#34; &#34;kale&#34;} #{&#34;mite&#34; &#34;item&#34;}})]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_78_reimplement_trampoline&#34;&gt;78. Reimplement Trampoline&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Reimplement the function described in &#34;Intro to Trampoline&#34;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn reimplement-trampoline
  ([f]
   (let [r (f)]
     (if (fn? r)
       (recur r)
       r)))
  ([f &amp;amp; args]
   (reimplement-trampoline #(apply f args))))

[(= (letfn [(triple [x] #(sub-two (* 3 x)))
           (sub-two [x] #(stop?(- x 2)))
           (stop? [x] (if (&amp;gt; x 50) x #(triple x)))]
     (reimplement-trampoline triple 2))
   82)
 (= (letfn [(my-even? [x] (if (zero? x) true #(my-odd? (dec x))))
           (my-odd? [x] (if (zero? x) false #(my-even? (dec x))))]
     (map (partial reimplement-trampoline my-even?) (range 6)))
    [true false true false true false])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_80_perfect_numbers&#34;&gt;80. Perfect Numbers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A number is &#34;perfect&#34; if the sum of its divisors equal the number itself. 6 is a perfect number because 1+2+3=6. Write a function which returns true for perfect numbers and false otherwise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn perfect-numbers [n]
  (= n
     (reduce +
             (filter #(zero? (mod n %))
                     (range 1 (inc (/ n 2)))))))

[(= (perfect-numbers 6) true)
 (= (perfect-numbers 7) false)
 (= (perfect-numbers 496) true)
 (= (perfect-numbers 500) false)
 (= (perfect-numbers 8128) true)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_85_power_set&#34;&gt;85. Power Set&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which generates the power set of a given set. The power set of a set x is the set of all subsets of x, including the empty set and x itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(require &#39;clojure.set)
(defn power-set [s]
   (reduce (fn [result next]
             (clojure.set/union result
                                (map #(conj % next)
                                     result)))
           #{#{}}
           s))

[(= (power-set #{1 :a}) #{#{1 :a} #{:a} #{} #{1}})
 (= (power-set #{}) #{#{}})
 (= (power-set #{1 2 3})
    #{#{} #{1} #{2} #{3} #{1 2} #{1 3} #{2 3} #{1 2 3}})
 (= (count (power-set (into #{} (range 10)))) 1024)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_86_happy_numbers&#34;&gt;86. Happy numbers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Happy numbers are positive integers that follow a particular formula: take each individual digit, square it, and then sum the squares to get a new number. Repeat with the new number and eventually, you might get to a number whose squared sum is 1. This is a happy number. An unhappy number (or sad number) is one that loops endlessly. Write a function that determines if a number is happy or not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn happy-numbers [x]
  {:pre [(pos? x)]}
  (letfn [(sum-of-square-digits [n]
            (-&amp;gt;&amp;gt; (str n)
                 (map js/parseInt)
                 (map #(* % %))
                 (reduce +)))]
  (loop [r #{}
         i x]
    (let [s (sum-of-square-digits i)]
      (cond
        (= s 1) true
        (contains? r s) false
        :else (recur (conj r s) s))))))

[(= (happy-numbers 7) true)
 (= (happy-numbers 986543210) true)
 (= (happy-numbers 2) false)
 (= (happy-numbers 3) false)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_93_partially_flatten_a_sequence&#34;&gt;93. Partially Flatten a Sequence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which flattens any nested combination of sequential things (lists, vectors, etc.), but maintains the lowest level sequential items. The result should be a sequence of sequences with only one level of nesting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn partially-flatten-a-sequence [s]
  (reduce (fn [result x]
            (concat result
                    (if (every? #(not (coll? %)) x)
                      (vector x)
                      (partially-flatten-a-sequence x))))
          [] s))

[(= (partially-flatten-a-sequence [[&#34;Do&#34;] [&#34;Nothing&#34;]])
    [[&#34;Do&#34;] [&#34;Nothing&#34;]])
 (= (partially-flatten-a-sequence [[[[:a :b]]] [[:c :d]] [:e :f]])
    [[:a :b] [:c :d] [:e :f]])
 (= (partially-flatten-a-sequence &#39;((1 2)((3 4)((((5 6)))))))
    &#39;((1 2)(3 4)(5 6)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_98_equivalence_classes&#34;&gt;98. Equivalence Classes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A function f defined on a domain D induces an equivalence relation on D, as follows: a is equivalent to b with respect to f if and only if (f a) is equal to (f b). Write a function with arguments f and D that computes the equivalence classes of D with respect to f.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn equivalence-classes [f d]
  (set
    (map #(set (map first %))
         (vals
           (group-by second
                     (map #(list % (f %)) d))))))

[(= (equivalence-classes #(* % %) #{-2 -1 0 1 2})
    #{#{0} #{1 -1} #{2 -2}})
 (= (equivalence-classes #(rem % 3) #{0 1 2 3 4 5 })
    #{#{0 3} #{1 4} #{2 5}})
 (= (equivalence-classes identity #{0 1 2 3 4})
    #{#{0} #{1} #{2} #{3} #{4}})
 (= (equivalence-classes (constantly true) #{0 1 2 3 4})
    #{#{0 1 2 3 4}})]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_102_intocamelcase&#34;&gt;102. intoCamelCase&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When working with java, you often need to create an object with fieldsLikeThis, but you&amp;#8217;d rather work with a hashmap that has :keys-like-this until it&amp;#8217;s time to convert. Write a function which takes lower-case hyphen-separated strings and converts them to camel-case strings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn into-camel-case [s]
  (if-not (nil? (re-find #&#34;-&#34; s))
    (let [split (clojure.string/split s #&#34;-&#34;)]
      (str
        (first split)
        (clojure.string/join
          (map clojure.string/capitalize (rest split)))))
    s))

[(= (into-camel-case &#34;something&#34;) &#34;something&#34;)
 (= (into-camel-case &#34;multi-word-key&#34;) &#34;multiWordKey&#34;)
 (= (into-camel-case &#34;leaveMeAlone&#34;) &#34;leaveMeAlone&#34;)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_103_generating_k_combinations&#34;&gt;103. Generating k-combinations&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Given a sequence S consisting of n elements generate all k-combinations of S, i. e. generate all possible sets consisting of k distinct elements taken from S. The number of k-combinations for a sequence is equal to the binomial coefficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn generating-k-combinations [k s]
  (set
    (cond
      (&amp;gt; k (count s)) []
      (= k 1)         (reduce #(concat %1 #{#{%2}}) #{} s)
      :else           (-&amp;gt;&amp;gt; (reduce #(concat %1
                                            (map (fn [e] (set (conj e %2))) %1))
                                   #{#{}}
                                   s)
                           (filter #(= k (count %)))))))

[(= (generating-k-combinations 1 #{4 5 6}) #{#{4} #{5} #{6}})
 (= (generating-k-combinations 10 #{4 5 6}) #{})
 (= (generating-k-combinations 2 #{0 1 2}) #{#{0 1} #{0 2} #{1 2}})
 (= (generating-k-combinations 3 #{0 1 2 3 4}) #{#{0 1 2} #{0 1 3} #{0 1 4} #{0 2 3} #{0 2 4}
                                                 #{0 3 4} #{1 2 3} #{1 2 4} #{1 3 4} #{2 3 4}})
 (= (generating-k-combinations 4 #{[1 2 3] :a &#34;abc&#34; &#34;efg&#34;}) #{#{[1 2 3] :a &#34;abc&#34; &#34;efg&#34;}})
 (= (generating-k-combinations 2 #{[1 2 3] :a &#34;abc&#34; &#34;efg&#34;}) #{#{[1 2 3] :a} #{[1 2 3] &#34;abc&#34;} #{[1 2 3] &#34;efg&#34;}
                                                            #{:a &#34;abc&#34;} #{:a &#34;efg&#34;} #{&#34;abc&#34; &#34;efg&#34;}})]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_105_identify_keys_and_values&#34;&gt;105. Identify keys and values&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Given an input sequence of keywords and numbers, create a map such that each key in the map is a keyword, and the value is a sequence of all the numbers (if any) between it and the next keyword in the sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn identify-keys-and-values [s]
  (into {}
        (map #(vector (first %) (into [] (rest %)))
              (let [new (atom false)]
                (partition-by #(if (keyword? %)
                                 (reset! new (not @new))
                                 @new)
                              s)))))

[(= {} (identify-keys-and-values []))
 (= {:a [1]} (identify-keys-and-values [:a 1]))
 (= {:a [1], :b [2]} (identify-keys-and-values [:a 1, :b 2]))
 (= {:a [1 2 3], :b [], :c [4]} (identify-keys-and-values [:a 1 2 3 :b :c 4]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_110_sequence_of_pronunciations&#34;&gt;110. Sequence of pronunciations&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function that returns a lazy sequence of &#34;pronunciations&#34; of a sequence of numbers. A pronunciation of each element in the sequence consists of the number of repeating identical numbers and the number itself. For example, [1 1] is pronounced as [2 1] (&#34;two ones&#34;), which in turn is pronounced as [1 2 1 1] (&#34;one two, one one&#34;). Your function should accept an initial sequence of numbers, and return an infinite lazy sequence of pronunciations, each element being a pronunciation of the previous element.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn sequence-of-pronounciations [s]
  (let [n (flatten
            (map #(vector (count %) (first %))
                 (partition-by identity s)))]
    (lazy-seq
      (cons n (sequence-of-pronounciations n)))))

[(= [[1 1] [2 1] [1 2 1 1]] (take 3 (sequence-of-pronounciations [1])))
 (= [3 1 2 4] (first (sequence-of-pronounciations [1 1 1 4 4])))
 (= [1 1 1 3 2 1 3 2 1 1] (nth (sequence-of-pronounciations [1]) 6))
 (= 338 (count (nth (sequence-of-pronounciations [3 2]) 15)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_114_global_take_while&#34;&gt;114. Global take-while&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;take-while&lt;/code&gt; is great for filtering sequences, but it limited: you can only examine a single item of the sequence at a time. What if you need to keep track of some state as you go over the sequence? Write a function which accepts an integer n, a predicate p, and a sequence. It should return a lazy sequence of items in the list up to, but not including, the nth item that satisfies the predicate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn global-take-while [n p [x &amp;amp; xs]]
  (let [n-next (if (p x)
                 (dec n)
                 n)]
    (if (zero? n-next)
      &#39;()
      (lazy-seq (cons x (global-take-while n-next p xs))))))

[(= [2 3 5 7 11 13]
    (global-take-while 4 #(= 2 (mod % 3))
          [2 3 5 7 11 13 17 19 23]))
 (= [&#34;this&#34; &#34;is&#34; &#34;a&#34; &#34;sentence&#34;]
    (global-take-while 3 #(some #{\i} %)
          [&#34;this&#34; &#34;is&#34; &#34;a&#34; &#34;sentence&#34; &#34;i&#34; &#34;wrote&#34;]))
 (= [&#34;this&#34; &#34;is&#34;]
    (global-take-while 1 #{&#34;a&#34;}
          [&#34;this&#34; &#34;is&#34; &#34;a&#34; &#34;sentence&#34; &#34;i&#34; &#34;wrote&#34;]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_115_the_balance_of_n&#34;&gt;115. The Balance of N&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A balanced number is one whose component digits have the same sum on the left and right halves of the number. Write a function which accepts an integer n, and returns true iff n is balanced.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn the-balance-of-n [n]
  (letfn [(sum [s]
            (reduce + (map js/parseInt s)))]
    (let [   s (.toString n)
          half (quot (count s) 2)]
      (=
        (sum (take half s))
        (sum (take-last half s))))))

[(= true (the-balance-of-n 11))
 (= true (the-balance-of-n 121))
 (= false (the-balance-of-n 123))
 (= true (the-balance-of-n 0))
 (= false (the-balance-of-n 88099))
 (= true (the-balance-of-n 89098))
 (= true (the-balance-of-n 89089))
 (= (take 20 (filter the-balance-of-n (range)))
    [0 1 2 3 4 5 6 7 8 9 11 22 33 44 55 66 77 88 99 101])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_116_prime_sandwich&#34;&gt;116. Prime Sandwich&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A balanced prime is a prime number which is also the mean of the primes directly before and after it in the sequence of valid primes. Create a function which takes an integer n, and returns true iff it is a balanced prime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn prime-sandwich? [n]
  (letfn [(prime? [n]
            (and
              (&amp;gt; n 1)
              (not-any? #(zero? (mod n %)) (range 2 n))))]
    (and
      (&amp;gt; n 2)
      (prime? n)
      (let [primes (lazy-seq (filter prime? (range)))
            primes-before (take-while #(&amp;lt;= % n) primes)
            prime-before (last (butlast primes-before))
            prime-after (first (drop (count primes-before) primes))]
         (= n (/ (+ prime-before prime-after) 2))))))

[(= false (prime-sandwich? 4))
 (= true (prime-sandwich? 563))
 (= 1103 (nth (filter prime-sandwich? (range)) 15))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_121_universal_computation_engine&#34;&gt;121. Universal Computation Engine&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Given a mathematical formula in prefix notation, return a function that calculates the value of the formula. The formula can contain nested calculations using the four basic mathematical operators, numeric constants, and symbols representing variables. The returned function has to accept a single parameter containing the map of variable names to their values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn universal-computation-engine [formula]
  (fn [parameters]
    (letfn [(evaluate [x]
              (cond
                (seq? x) (apply ({&#39;/ / &#39;+ + &#39;- - &#39;* *} (first x)) (map evaluate (rest x)))
                (number? x) x))]
      (evaluate (clojure.walk/prewalk-replace parameters formula)))))

[(= 2 ((universal-computation-engine &#39;(/ a b))
                                     &#39;{b 8 a 16}))
 (= 8 ((universal-computation-engine &#39;(+ a b 2))
                                     &#39;{a 2 b 4}))
 (= [6 0 -4]
      (map (universal-computation-engine &#39;(* (+ 2 a)
                   (- 10 b)))
             &#39;[{a 1 b 8}
               {b 5 a -2}
               {a 2 b 11}]))
 (= 1 ((universal-computation-engine &#39;(/ (+ x 2)
               (* 3 (+ y 1))))
       &#39;{x 4 y 1}))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_132_insert_between_two_items&#34;&gt;132. Insert between two items&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function that takes a two-argument predicate, a value, and a collection; and returns a new collection where the value is inserted between every two items that satisfy the predicate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn insert-between-two-items [p v s]
  (if (empty? s)
    []
    (flatten
      (concat [(first s)]
              (map #(if (apply p %)
                     (vector v (second %))
                     (second %))
                   (partition 2 1 s))))))

[(= &#39;(1 :less 6 :less 7 4 3) (insert-between-two-items &amp;lt; :less [1 6 7 4 3]))
 (= &#39;(2) (insert-between-two-items &amp;gt; :more [2]))
 (= [0 1 :x 2 :x 3 :x 4]  (insert-between-two-items #(and (pos? %) (&amp;lt; % %2)) :x (range 5)))
 (empty? (insert-between-two-items &amp;gt; :more ()))
 (= [0 1 :same 1 2 3 :same 5 8 13 :same 21]
    (take 12 (-&amp;gt;&amp;gt; [0 1]
                  (iterate (fn [[a b]] [b (+ a b)]))
                  (map first) ; fibonacci numbers
                  (insert-between-two-items (fn [a b] ; both even or both odd
                                              (= (mod a 2) (mod b 2)))
                                              :same))))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_137_digits_and_bases&#34;&gt;137. Digits and bases&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns a sequence of digits of a non-negative number (first argument) in numerical system with an arbitrary base (second argument). Digits should be represented with their integer values, e.g. 15 would be [1 5] in base 10, [1 1 1 1] in base 2 and [15] in base 16.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn digits-and-bases [n base]
  {:pre [(&amp;gt;= n 0)]}
  (letfn [(step [r n base]
            (if (zero? n)
              r
              (step (conj r (mod n base))
                    (quot n base)
                    base)))]
    (if (zero? n)
      &#39;(0)
      (step &#39;() n base))))

[(= [1 2 3 4 5 0 1] (digits-and-bases 1234501 10))
 (= [0] (digits-and-bases 0 11))
 (= [1 0 0 1] (digits-and-bases 9 2))
 (= [1 0] (let [n (rand-int 100000)](digits-and-bases n n)))
 (= [16 18 5 24 15 1] (digits-and-bases 2147483647 42))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_144_oscilrate&#34;&gt;144. Oscilrate&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write an oscillating iterate: a function that takes an initial value and a variable number of functions. It should return a lazy sequence of the functions applied to the value in order, restarting from the first function after it hits the end.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn oscilrate [v &amp;amp; fs]
  (reductions (fn [v f] (f v)) v (cycle fs)))

[(= (take 3 (oscilrate 3.14 int double)) [3.14 3 3.0])
 (= (take 5 (oscilrate 3 #(- % 3) #(+ 5 %))) [3 0 5 2 7])
 (= (take 12 (oscilrate 0 inc dec inc dec inc)) [0 1 0 1 0 1 2 1 2 1 2 3])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_148_the_big_divide&#34;&gt;148. The Big Divide&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which calculates the sum of all natural numbers under n (first argument) which are evenly divisible by at least one of a and b (second and third argument). Numbers a and b are guaranteed to be coprimes. Note: Some test cases have a very large n, so the most obvious solution will exceed the time limit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn the-big-divide [n a b]
  (letfn [(cnt [x]
            (quot (dec n) x))
          (sum [x]
            (/ (*&#39; (cnt x) (+ x (* x (cnt x)))) 2))]
    (-
      (+
        (sum a)
        (sum b))
      (sum (* a b)))))

[(= 0 (the-big-divide 3 17 11))
 (= 23 (the-big-divide 10 3 5))
 (= 233168 (the-big-divide 1000 3 5))
 (= &#34;2333333316666668&#34; (str (the-big-divide 100000000 3 5)))
 (= &#34;110389610389889610389610&#34;
    (str (the-big-divide (* 10000 10000 10000) 7 11)))
 (= &#34;1277732511922987429116&#34;
    (str (the-big-divide (* 10000 10000 10000) 757 809)))
 (= &#34;4530161696788274281&#34;
    (str (the-big-divide (* 10000 10000 1000) 1597 3571))))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_158_decurry&#34;&gt;158. Decurry&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function that accepts a curried function of unknown arity n. Return an equivalent function of n arguments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn decurry [f]
  (fn [&amp;amp; args]
    (reduce #(%1 %2) f args)))

[(= 10 ((decurry (fn [a]
                   (fn [b]
                     (fn [c]
                       (fn [d]
                         (+ a b c d))))))
          1 2 3 4))
 (= 24 ((decurry (fn [a]
                   (fn [b]
                     (fn [c]
                       (fn [d]
                         (* a b c d))))))
         1 2 3 4))
 (= 25 ((decurry (fn [a]
                   (fn [b]
                     (* a b))))
          5 5))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_171_intervals&#34;&gt;171. Intervals&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function that takes a sequence of integers and returns a sequence of &#34;intervals&#34;. Each interval is a a vector of two integers, start and end, such that all integers between start and end (inclusive) are contained in the input sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn intervals [s]
  (vec
    (map #(vec [(first %) (last %)])
         (map #(map last %)
              (partition-by #(apply - %) (map-indexed vector (sort (distinct s))))))))

[(= (intervals [1 2 3]) [[1 3]])
 (= (intervals [10 9 8 1 2 3]) [[1 3] [8 10]])
 (= (intervals [1 1 1 1 1 1 1]) [[1 1]])
 (= (intervals []) [])
 (= (intervals [19 4 17 1 3 10 2 13 13 2 16 4 2 15 13 9 6 14 2 11])
               [[1 4] [6 6] [9 11] [13 17] [19 19]])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to Fail at Almost Everything and Still Win Big - Scott Adams</title>
      <link>http://www.anthony-galea.com/blog/post/how-to-fail-at-almost-everything-and-still-win-big---scott-adams/</link>
      <pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/how-to-fail-at-almost-everything-and-still-win-big---scott-adams/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In &lt;a href=&#34;https://www.goodreads.com/book/show/17859574-how-to-fail-at-almost-everything-and-still-win-big&#34;&gt;How to Fail at Almost Everything and Still Win Big&lt;/a&gt;, Scott Adams, creator of the &lt;a href=&#34;http://dilbert.com&#34;&gt;Dilbert comic strip&lt;/a&gt;, doles out some great nuggets of wisdom such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;money distorts truth like a hippo in a thong&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Really enjoyed reading this one. Some highlights below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_simplicity&#34;&gt;On Simplicity&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My wife, Shelly, is a world-class optimizer. I, on the other hand, cling to simplicity like a monkey on a coconut.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Simplicity transforms ordinary into amazing.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_being_an_expert&#34;&gt;On being an Expert&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I’m also not an expert at anything, including my own job. I draw like an inebriated howler monkey and my writing style falls somewhere between baffling and sophomoric. It’s an ongoing mystery to me why I keep getting paid.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_humility&#34;&gt;On Humility&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When it comes to any big or complicated question, humility is the only sensible point of view.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_failure&#34;&gt;On Failure&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The short answer is that over the years I have cultivated a unique relationship with failure. I invite it. I survive it. I appreciate it. And then I mug the shit out of it.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_good_ideas_vs_execution&#34;&gt;On Good Ideas vs Execution&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Good ideas have no value because the world already has too many of them. The market rewards execution, not ideas.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_goals&#34;&gt;On Goals&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To put it bluntly, goals are for losers. &amp;#8230;&amp;#8203; you will spend every moment until you reach the goal—if you reach it at all—feeling as if you were short of your goal. In other words, goal-oriented people exist in a state of nearly continuous failure that they hope will be temporary. That feeling wears on you. In time, it becomes heavy and uncomfortable. It might even drive you out of the game.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_knowledge&#34;&gt;On Knowledge&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Reality is overrated and impossible to understand with any degree of certainty. What you do know for sure is that some ways of looking at the world work better than others. Pick the way that works, even if you don’t know why.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_success&#34;&gt;On Success&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One of the best pieces of advice I’ve ever heard goes something like this: If you want success, figure out the price, then pay it.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with compojure-api</title>
      <link>http://www.anthony-galea.com/blog/post/getting-started-with-compojure-api/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/getting-started-with-compojure-api/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this post, I will give a walkthrough of building a simple service using &lt;a href=&#34;https://github.com/metosin/compojure-api&#34;&gt;compojure-api&lt;/a&gt;. As a use case we will build a simple account service that offers two functions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;creating an account with some initial balance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transferring some amount from one account to another.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;By the end of this tutorial you should have a swagger UI that allows testing these two calls:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://www.anthony-galea.com/images/2016-04-28-swagger.png&#34; alt=&#34;2016 04 28 swagger&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The only prerequisite is that you install &lt;a href=&#34;http://leiningen.org/&#34;&gt;Leiningen&lt;/a&gt;. Leiningen provides build automation and dependency management for Clojure projects. If you&amp;#8217;re on Mac OS and using &lt;code&gt;brew&lt;/code&gt; you can install it by opening a shell and running &lt;code&gt;brew install leiningen&lt;/code&gt;. If you&amp;#8217;re on another platform follow the instructions at &lt;a href=&#34;http://leiningen.org&#34;&gt;leiningen.org&lt;/a&gt;. After installing leiningen you should be able to  run &lt;code&gt;lein --version&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;$ lein --version
Leiningen &lt;span class=&#34;tok-m&#34;&gt;2&lt;/span&gt;.6.1 on Java &lt;span class=&#34;tok-m&#34;&gt;1&lt;/span&gt;.8.0_31 Java HotSpot&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;TM&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-m&#34;&gt;64&lt;/span&gt;-Bit Server VM&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_create_a_project&#34;&gt;Create a project&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With &lt;code&gt;leiningen&lt;/code&gt; installed run &lt;code&gt;lein new account-service&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;$ lein new account-service
$ &lt;span class=&#34;tok-nb&#34;&gt;cd&lt;/span&gt; account-service
$ tree
.
├── CHANGELOG.md
├── LICENSE
├── README.md
├── doc
│   └── intro.md
├── project.clj
├── resources
├── src
│   └── account_service
│       └── core.clj
└── &lt;span class=&#34;tok-nb&#34;&gt;test&lt;/span&gt;
    └── account_service
        └── core_test.clj&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_getting_started_with_ring&#34;&gt;Getting started with Ring&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Before diving into compojure-api let&amp;#8217;s demonstrate a simple use case using the &lt;a href=&#34;https://github.com/ring-clojure/ring&#34;&gt;ring&lt;/a&gt; library. Take a look inside &lt;code&gt;src/account-service/core.clj&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;ns &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account-service.core&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;foo&lt;/span&gt;
  &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;I don&amp;#39;t do a whole lot.&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;println &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Replace &lt;code&gt;foo&lt;/code&gt; with a simple &lt;code&gt;handler&lt;/code&gt; function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;ns &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account-service.core&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:body&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Hello from ring&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We will use this &lt;code&gt;handler&lt;/code&gt; function to handle all incoming requests. As you can see it just returns a simple &lt;code&gt;map&lt;/code&gt; in which we have an entry with key &lt;code&gt;:body&lt;/code&gt; and a &lt;code&gt;string&lt;/code&gt; as the value. Now take a look inside &lt;code&gt;project.clj&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defproject &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account-service&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;0.1.0-SNAPSHOT&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:description&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;FIXME: write description&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:url&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;http://example.com/FIXME&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:license&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:name&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Eclipse Public License&amp;quot;&lt;/span&gt;
            &lt;span class=&#34;tok-ss&#34;&gt;:url&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:dependencies&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;org.clojure/clojure&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;1.8.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can remove the &lt;code&gt;:description&lt;/code&gt;, &lt;code&gt;:url&lt;/code&gt; and &lt;code&gt;:license&lt;/code&gt; entries for now, and add the &lt;code&gt;ring&lt;/code&gt; dependency, the &lt;code&gt;lein-ring&lt;/code&gt; plugin and the reference to the ring &lt;code&gt;handler&lt;/code&gt; which we wrote in the previous step:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defproject &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account-service&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;0.1.0-SNAPSHOT&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:dependencies&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;org.clojure/clojure&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;1.8.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
                 &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;ring&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;1.4.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:ring&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:handler&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;account-service.core/handler&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:profiles&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:dev&lt;/span&gt;
              &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:plugins&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;lein-ring&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;0.9.7&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]}})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;That&amp;#8217;s it. We have instructed &lt;code&gt;Ring&lt;/code&gt; where it can find the function to process all incoming &lt;code&gt;HTTP&lt;/code&gt; requests. Now let&amp;#8217;s run our simple web application. Open a shell and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;$ lein ring server-headless
...
Started server on port &lt;span class=&#34;tok-m&#34;&gt;3000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This starts a server which will handle incoming &lt;code&gt;HTTP&lt;/code&gt; requests on port 3000. In another shell we can test the server by running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;$ curl http://localhost:3000/
Hello from ring&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As you can see we have the response containing &lt;code&gt;Hello from ring&lt;/code&gt; which we wrote previously in our &lt;code&gt;handler&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_live_reload&#34;&gt;Live reload&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With the ring server still running, change the message in the &lt;code&gt;handler&lt;/code&gt; function in &lt;code&gt;core.clj&lt;/code&gt;, save the file, and rerun &lt;code&gt;curl &lt;a href=&#34;http://localhost:3000/&#34; class=&#34;bare&#34;&gt;http://localhost:3000/&lt;/a&gt;&lt;/code&gt;. You should see the updated message.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_using_compojure_api&#34;&gt;Using compojure-api&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/metosin/compojure-api&#34;&gt;compojure-api&lt;/a&gt; library makes it very easy to build web APIs. It is built on top of &lt;a href=&#34;https://github.com/weavejester/compojure&#34;&gt;compojure&lt;/a&gt; and &lt;a href=&#34;https://github.com/ring-clojure/ring&#34;&gt;ring&lt;/a&gt;. It also uses the &lt;a href=&#34;https://github.com/plumatic/schema&#34;&gt;schema&lt;/a&gt; library for describing and validating requests, and &lt;a href=&#34;https://github.com/metosin/ring-swagger&#34;&gt;ring-swagger&lt;/a&gt; to expose API documentation. First, let&amp;#8217;s add some requires in &lt;code&gt;core.clj&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;ns &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account-service.core&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:require&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;compojure.api.sweet&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:refer&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:all&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;ring.util.http-response&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:refer&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:all&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;schema.core&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;ring.swagger.schema&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;rs&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Next, we define schemas for the payloads:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/defschema&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;Account&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt;      &lt;span class=&#34;tok-nv&#34;&gt;Long&lt;/span&gt;
   &lt;span class=&#34;tok-ss&#34;&gt;:balance&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;s/Num&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/defschema&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;NewAccount&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;dissoc &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;Account&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/defschema&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;Transfer&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt;           &lt;span class=&#34;tok-nv&#34;&gt;Long&lt;/span&gt;
   &lt;span class=&#34;tok-ss&#34;&gt;:from-account&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;s/Int&lt;/span&gt;
   &lt;span class=&#34;tok-ss&#34;&gt;:to-account&lt;/span&gt;   &lt;span class=&#34;tok-nv&#34;&gt;s/Int&lt;/span&gt;
   &lt;span class=&#34;tok-ss&#34;&gt;:amount&lt;/span&gt;       &lt;span class=&#34;tok-nv&#34;&gt;s/Num&lt;/span&gt;
   &lt;span class=&#34;tok-ss&#34;&gt;:status&lt;/span&gt;       &lt;span class=&#34;tok-nv&#34;&gt;s/Keyword&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;})&lt;/span&gt;

&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;s/defschema&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;NewTransfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nb&#34;&gt;dissoc &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;Transfer&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;tok-ss&#34;&gt;:status&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And finally let&amp;#8217;s define our routes, one to create an account, and one to request a transfer. Replace the handler function we wrote earlier with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;app&lt;/span&gt;
  &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;api&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:swagger&lt;/span&gt;
     &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:ui&lt;/span&gt;   &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;
      &lt;span class=&#34;tok-ss&#34;&gt;:spec&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;/swagger.json&amp;quot;&lt;/span&gt;
      &lt;span class=&#34;tok-ss&#34;&gt;:data&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:info&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:title&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Account Service&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;
             &lt;span class=&#34;tok-ss&#34;&gt;:tags&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:name&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}]}}}&lt;/span&gt;
    &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;/api&amp;quot;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[]&lt;/span&gt;
             &lt;span class=&#34;tok-ss&#34;&gt;:tags&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
             &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;/account&amp;quot;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[]&lt;/span&gt;
                   &lt;span class=&#34;tok-ss&#34;&gt;:body&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;describe&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;NewAccount&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;new account&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
                   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;))&lt;/span&gt;
             &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;/transfer&amp;quot;&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[]&lt;/span&gt;
                   &lt;span class=&#34;tok-ss&#34;&gt;:body&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;transfer&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;describe&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;NewTransfer&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;new transfer&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)]&lt;/span&gt;
                   &lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-nf&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Finally replace &lt;code&gt;ring&lt;/code&gt; with the &lt;code&gt;compojure-api&lt;/code&gt; dependency in &lt;code&gt;project.clj&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;tok-p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-kd&#34;&gt;defproject &lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;account-service&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;0.1.0-SNAPSHOT&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:dependencies&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;org.clojure/clojure&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;1.8.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]&lt;/span&gt;
                 &lt;span class=&#34;tok-p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;metosin/compojure-api&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;1.0.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:ring&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:handler&lt;/span&gt; &lt;span class=&#34;tok-nv&#34;&gt;account-service.core/app&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;tok-ss&#34;&gt;:profiles&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:dev&lt;/span&gt;
             &lt;span class=&#34;tok-p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;tok-ss&#34;&gt;:plugins&lt;/span&gt;      &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;lein-ring&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;0.9.7&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]&lt;/span&gt;
              &lt;span class=&#34;tok-ss&#34;&gt;:dependencies&lt;/span&gt; &lt;span class=&#34;tok-p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;tok-nv&#34;&gt;javax.servlet/servlet-api&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;2.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-p&#34;&gt;]]}})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With that in place run &lt;code&gt;lein ring server&lt;/code&gt; in the shell and go to &lt;a href=&#34;http://localhost:3000/index.html&#34; class=&#34;bare&#34;&gt;http://localhost:3000/index.html&lt;/a&gt; in your browser. You should see a Swagger UI which allows you to try out the endpoints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://www.anthony-galea.com/images/2016-04-28-swagger-2.png&#34; alt=&#34;2016 04 28 swagger 2&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You should get &lt;code&gt;200&lt;/code&gt; for valid requests and &lt;code&gt;400&lt;/code&gt; for requests that don&amp;#8217;t conform to the schema we defined.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_packaging&#34;&gt;Packaging&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For packaging your app, you can either create an &lt;code&gt;uberjar&lt;/code&gt; and then simply run it like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;$ lein ring uberjar
$ java -jar target/account-service-0.1.0-SNAPSHOT-standalone.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;or create a &lt;code&gt;war&lt;/code&gt; and deploy it in your favorite container:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;$ lein ring uberwar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this post, we have exposed a simple API using &lt;a href=&#34;https://github.com/metosin/compojure-api&#34;&gt;compojure-api&lt;/a&gt;. You can find all the source code on &lt;a href=&#34;http://github.com/anthonygalea/account-service&#34;&gt;GitHub&lt;/a&gt;. In the next post, we will show how to use this in conjunction with &lt;a href=&#34;http://www.datomic.com&#34;&gt;Datomic&lt;/a&gt; for persistence.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Solutions to 4Clojure Easy Problems</title>
      <link>http://www.anthony-galea.com/blog/post/solutions-to-4clojure-easy-problems/</link>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/solutions-to-4clojure-easy-problems/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Following the first post on solutions to &lt;a href=&#34;http://www.4clojure.com&#34;&gt;4Clojure&lt;/a&gt; problems, in this post I will continue with the next set of problems. Once again all solutions are on &lt;a href=&#34;https://github.com/anthonygalea/solutions-4clojure&#34;&gt;GitHub&lt;/a&gt;, and if you have any suggestions/alternative solutions I would love to hear from you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_19_last_element&#34;&gt;19. Last Element&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns the last element in a sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn last-element [s]
  (nth s (dec (count s))))

[(= (last-element [1 2 3 4 5]) 5)
 (= (last-element &#39;(5 4 3)) 3)
 (= (last-element [&#34;b&#34; &#34;c&#34; &#34;d&#34;]) &#34;d&#34;)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_20_penultimate_element&#34;&gt;20. Penultimate Element&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns the second to last element from a sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn penultimate-element [s]
  (nth s (- (count s) 2)))

[(= (penultimate-element (list 1 2 3 4 5)) 4)
 (= (penultimate-element [&#34;a&#34; &#34;b&#34; &#34;c&#34;]) &#34;b&#34;)
 (= (penultimate-element [[1 2] [3 4]]) [1 2])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_21_nth_element&#34;&gt;21. Nth Element&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns the Nth element from a sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn nth-element [s n]
  (last (take (inc n) s)))

[(= (nth-element &#39;(4 5 6 7) 2) 6)
 (= (nth-element [:a :b :c] 0) :a)
 (= (nth-element [1 2 3 4] 1) 2)
 (= (nth-element &#39;([1 2] [3 4] [5 6]) 2) [5 6])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_22_count_a_sequence&#34;&gt;22. Count a Sequence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns the total number of elements in a sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn count-a-sequence [s]
  (reduce (fn [c _] (inc c)) 0 s))

[(= (count-a-sequence &#39;(1 2 3 3 1)) 5)
 (= (count-a-sequence &#34;Hello World&#34;) 11)
 (= (count-a-sequence [[1 2] [3 4] [5 6]]) 3)
 (= (count-a-sequence &#39;(13)) 1)
 (= (count-a-sequence &#39;(:a :b :c)) 3)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_23_reverse_a_sequence&#34;&gt;23. Reverse a Sequence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which reverses a sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn reverse-a-sequence [s]
  (reduce #(cons %2 %1) &#39;() s))

[(= (reverse-a-sequence [1 2 3 4 5]) [5 4 3 2 1])
 (= (reverse-a-sequence (sorted-set 5 7 2 7)) &#39;(7 5 2))
 (= (reverse-a-sequence [[1 2][3 4][5 6]]) [[5 6][3 4][1 2]])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_24_sum_it_all_up&#34;&gt;24. Sum It All Up&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns the sum of a sequence of numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn sum-it-all-up [s]
  (reduce + s))

[(= (sum-it-all-up [1 2 3]) 6)
 (= (sum-it-all-up (list 0 -2 5 5)) 8)
 (= (sum-it-all-up #{4 2 1}) 7)
 (= (sum-it-all-up &#39;(0 0 -1)) -1)
 (= (sum-it-all-up &#39;(1 10 3)) 14)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_25_find_the_odd_numbers&#34;&gt;25. Find the odd numbers&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns only the odd numbers from a sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn find-the-odd-numbers [s]
  (filter odd? s))

[(= (find-the-odd-numbers #{1 2 3 4 5}) &#39;(1 3 5))
 (= (find-the-odd-numbers [4 2 1 6]) &#39;(1))
 (= (find-the-odd-numbers [2 2 4 6]) &#39;())
 (= (find-the-odd-numbers [1 1 1 3]) &#39;(1 1 1 3))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_26_fibonacci_sequence&#34;&gt;26. Fibonacci Sequence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns the first X fibonacci numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn fibonacci-sequence [n]
  (letfn [(fib [a b] (lazy-seq (cons b (fib b (+ a b)))))]
  (take n (fib 0 1))))

[(= (fibonacci-sequence 3) &#39;(1 1 2))
 (= (fibonacci-sequence 6) &#39;(1 1 2 3 5 8))
 (= (fibonacci-sequence 8) &#39;(1 1 2 3 5 8 13 21))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_27_palindrome_detector&#34;&gt;27. Palindrome Detector&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns &lt;code&gt;true&lt;/code&gt; if the given sequence is a palindrome. Hint: &#34;racecar&#34; does not equal &#39;(\r \a \c \e \c \a \r)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn palindrome-detector [s]
  (= (seq s) (reverse s)))

[(false? (palindrome-detector &#39;(1 2 3 4 5)))
 (true? (palindrome-detector &#34;racecar&#34;))
 (true? (palindrome-detector [:foo :bar :foo]))
 (true? (palindrome-detector &#39;(1 1 3 3 1 1)))
 (false? (palindrome-detector &#39;(:a :b :c)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_28_flatten_a_sequence&#34;&gt;28. Flatten a Sequence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which flattens a sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn flatten-a-sequence [s]
  (reduce (fn myflatten [collection element]
            (if (sequential? element)
              (reduce myflatten collection element)
              (conj collection element))) [] s))

[(= (flatten-a-sequence &#39;((1 2) 3 [4 [5 6]])) &#39;(1 2 3 4 5 6))
 (= (flatten-a-sequence [&#34;a&#34; [&#34;b&#34;] &#34;c&#34;]) &#39;(&#34;a&#34; &#34;b&#34; &#34;c&#34;))
 (= (flatten-a-sequence &#39;((((:a))))) &#39;(:a))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_29_get_the_caps&#34;&gt;29. Get the Caps&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which takes a string and returns a new string containing only the capital letters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn get-the-caps [s]
  (apply str (re-seq #&#34;[A-Z]+&#34; s)))

[(= (get-the-caps &#34;HeLlO, WoRlD!&#34;) &#34;HLOWRD&#34;)
 (empty? (get-the-caps &#34;nothing&#34;))
 (= (get-the-caps &#34;$#A(*&amp;amp;987Zf&#34;) &#34;AZ&#34;)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_30_compress_a_sequence&#34;&gt;30. Compress a Sequence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which removes consecutive duplicates from a sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn compress-a-sequence [s]
  (map #(first %) (partition-by identity s)))

[(= (apply str (compress-a-sequence &#34;Leeeeeerrroyyy&#34;)) &#34;Leroy&#34;)
 (= (compress-a-sequence [1 1 2 3 3 2 2 3]) &#39;(1 2 3 2 3))
 (= (compress-a-sequence [[1 2] [1 2] [3 4] [1 2]]) &#39;([1 2] [3 4] [1 2]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_31_pack_a_sequence&#34;&gt;31. Pack a Sequence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which packs consecutive duplicates into sub-lists.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn pack-a-sequence [s]
  (partition-by identity s))

[(= (pack-a-sequence [1 1 2 1 1 1 3 3]) &#39;((1 1) (2) (1 1 1) (3 3)))
 (= (pack-a-sequence [:a :a :b :b :c]) &#39;((:a :a) (:b :b) (:c)))
 (= (pack-a-sequence [[1 2] [1 2] [3 4]]) &#39;(([1 2] [1 2]) ([3 4])))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_32_duplicate_a_sequence&#34;&gt;32. Duplicate a Sequence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which duplicates each element of a sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn duplicate-a-sequence [s]
  (reduce #(conj (conj %1 %2) %2) [] s))

[(= (duplicate-a-sequence [1 2 3]) &#39;(1 1 2 2 3 3))
 (= (duplicate-a-sequence [:a :a :b :b]) &#39;(:a :a :a :a :b :b :b :b))
 (= (duplicate-a-sequence [[1 2] [3 4]]) &#39;([1 2] [1 2] [3 4] [3 4]))
 (= (duplicate-a-sequence [[1 2] [3 4]]) &#39;([1 2] [1 2] [3 4] [3 4]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_33_replicate_a_sequence&#34;&gt;33. Replicate a Sequence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which replicates each element of a sequence a variable number of times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn replicate-a-sequence [s n]
  (apply concat (map #(repeat n %) s)))

[(= (replicate-a-sequence [1 2 3] 2) &#39;(1 1 2 2 3 3))
 (= (replicate-a-sequence [:a :b] 4) &#39;(:a :a :a :a :b :b :b :b))
 (= (replicate-a-sequence [4 5 6] 1) &#39;(4 5 6))
 (= (replicate-a-sequence [[1 2] [3 4]] 2) &#39;([1 2] [1 2] [3 4] [3 4]))
 (= (replicate-a-sequence [44 33] 2) [44 44 33 33])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_34_implement_range&#34;&gt;34. Implement range&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which creates a list of all integers in a given range.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn implement-range [start end]
  (take (- end start) (iterate inc start)))

[(= (implement-range 1 4) &#39;(1 2 3))
 (= (implement-range -2 2) &#39;(-2 -1 0 1))
 (= (implement-range 5 8) &#39;(5 6 7))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_38_maximum_value&#34;&gt;38. Maximum value&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which takes a variable number of parameters and returns the maximum value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn maximum-value [&amp;amp; params]
  (reduce
    (fn [x y]
      (if (&amp;lt; x y) y x))
    params))

[(= (maximum-value 1 8 3 4) 8)
 (= (maximum-value 30 20) 30)
 (= (maximum-value 45 67 11) 67)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_39_interleave_two_seqs&#34;&gt;39. Interleave Two Seqs&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which takes two sequences and returns the first item from each, then the second item from each, then the third, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn interleave-two-seqs [a b]
  (if (&amp;lt;= (count a) (count b))
  (flatten (map-indexed (fn [index item] [item (nth b index)]) a))
  (flatten (map-indexed (fn [index item] [item (nth b index)]) (take (count b) a)))))

[(= (interleave-two-seqs [1 2 3] [:a :b :c]) &#39;(1 :a 2 :b 3 :c))
 (= (interleave-two-seqs [1 2] [3 4 5 6]) &#39;(1 3 2 4))
 (= (interleave-two-seqs [1 2 3 4] [5]) [1 5])
 (= (interleave-two-seqs [30 20] [25 15]) [30 25 20 15])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_40_interpose_a_seq&#34;&gt;40. Interpose a Seq&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which separates the items of a sequence by an arbitrary value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn interpose-a-seq [v s]
  (rest (mapcat #(list v %) s)))

[(= (interpose-a-seq 0 [1 2 3]) [1 0 2 0 3])
 (= (apply str (interpose-a-seq &#34;, &#34; [&#34;one&#34; &#34;two&#34; &#34;three&#34;])) &#34;one, two, three&#34;)
 (= (interpose-a-seq :z [:a :b :c :d]) [:a :z :b :z :c :z :d])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_41_drop_every_nth_item&#34;&gt;41. Drop Every Nth Item&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which drops every Nth item from a sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn drop-every-nth-item [s n]
  (keep-indexed #(if (not= (mod %1 n) (dec n)) %2) s))

[(= (drop-every-nth-item [1 2 3 4 5 6 7 8] 3) [1 2 4 5 7 8])
 (= (drop-every-nth-item [:a :b :c :d :e :f] 2) [:a :c :e])
 (= (drop-every-nth-item [1 2 3 4 5 6] 4) [1 2 3 5 6])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_42_factorial_fun&#34;&gt;42. Factorial Fun&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which calculates factorials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn factorial-fun [n]
  (reduce * (range 1 (+ n 1))))

[(= (factorial-fun 1) 1)
 (= (factorial-fun 3) 6)
 (= (factorial-fun 5) 120)
 (= (factorial-fun 8) 40320)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_45_intro_to_iterate&#34;&gt;45. Intro to Iterate&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The iterate function can be used to produce an infinite lazy sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def intro-to-iterate [1 4 7 10 13])

[(= intro-to-iterate (take 5 (iterate #(+ 3 %) 1)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_47_contain_yourself&#34;&gt;47. Contain Yourself&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;contains?&lt;/code&gt; function checks if a KEY is present in a given collection. This often leads beginner clojurians to use it incorrectly with numerically indexed collections like vectors and lists.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def contain-yourself 4)

[(contains? #{4 5 6} contain-yourself)
 (contains? [1 1 1 1 1] contain-yourself)
 (contains? {4 :a 2 :b} contain-yourself)
 (not (contains? [1 2 4] contain-yourself))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_48_intro_to_some&#34;&gt;48. Intro to some&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The some function takes a predicate function and a collection. It returns the first logical true value of (predicate x) where x is an item in the collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def intro-to-some 6)

[(= intro-to-some (some #{2 7 6} [5 6 7 8]))
 (= intro-to-some (some #(when (even? %) %) [5 6 7 8]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_49_split_a_sequence&#34;&gt;49. Split a sequence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which will split a sequence into two parts. Do not use &lt;code&gt;split-at&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn split-a-sequence [n s]
  (list (take n s) (drop n s)))

[(= (split-a-sequence 3 [1 2 3 4 5 6]) [[1 2 3] [4 5 6]])
 (= (split-a-sequence 1 [:a :b :c :d]) [[:a] [:b :c :d]])
 (= (split-a-sequence 2 [[1 2] [3 4] [5 6]]) [[[1 2] [3 4]] [[5 6]]])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_51_advanced_destructuring&#34;&gt;51. Advanced Destructuring&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here is an example of some more sophisticated destructuring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def advanced-destructuring [1 2 3 4 5])

[(= [1 2 [3 4 5] [1 2 3 4 5]] (let [[a b &amp;amp; c :as d] advanced-destructuring] [a b c d]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_61_map_construction&#34;&gt;61. Map Construction&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which takes a vector of keys and a vector of values and constructs a map from them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn map-construction [keys values]
  (apply assoc {} (interleave keys values)))

[(= (map-construction [:a :b :c] [1 2 3]) {:a 1, :b 2, :c 3})
 (= (map-construction [1 2 3 4] [&#34;one&#34; &#34;two&#34; &#34;three&#34;]) {1 &#34;one&#34;, 2 &#34;two&#34;, 3 &#34;three&#34;})
 (= (map-construction [:foo :bar] [&#34;foo&#34; &#34;bar&#34; &#34;baz&#34;]) {:foo &#34;foo&#34;, :bar &#34;bar&#34;})]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_62_re_implement_iterate&#34;&gt;62. Re-implement Iterate&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Given a side-effect free function f and an initial value x write a function which returns an infinite lazy sequence of x, (f x), (f (f x)), (f (f (f x))), etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn reimplement-iterate [f x]
  (cons x (lazy-seq (reimplement-iterate f (f x)))))

[(= (take 5 (reimplement-iterate #(* 2 %) 1)) [1 2 4 8 16])
 (= (take 100 (reimplement-iterate inc 0)) (take 100 (range)))
 (= (take 9 (reimplement-iterate #(inc (mod % 3)) 1)) (take 9 (cycle [1 2 3])))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_63_group_a_sequence&#34;&gt;63. Group a Sequence&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Given a function f and a sequence s, write a function which returns a map. The keys should be the values of f applied to each item in s. The value at each key should be a vector of corresponding items in the order they appear in s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn group-a-sequence [f vals]
  (into {}
        (map #(vector (f (first %)) (vec %))
             (partition-by f (sort vals)))))

[(= (group-a-sequence #(&amp;gt; % 5) [1 3 6 8]) {false [1 3], true [6 8]})
 (= (group-a-sequence #(apply / %) [[1 2] [2 4] [4 6] [3 6]])
    {1/2 [[1 2] [2 4] [3 6]], 2/3 [[4 6]]})
 (= (group-a-sequence count [[1] [1 2] [3] [1 2 3] [2 3]])
    {1 [[1] [3]], 2 [[1 2] [2 3]], 3 [[1 2 3]]})]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_66_greatest_common_divisor&#34;&gt;66. Greatest Common Divisor&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Given two integers, write a function which returns the greatest common divisor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn greatest-common-divisor [a b]
  (if (= b 0)
    a
    (recur b (mod a b))))

[(= (greatest-common-divisor 2 4) 2)
 (= (greatest-common-divisor 10 5) 5)
 (= (greatest-common-divisor 5 7) 1)
 (= (greatest-common-divisor 1023 858) 33)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_81_set_intersection&#34;&gt;81. Set Intersection&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns the intersection of two sets. The intersection is the sub-set of items that each set has in common.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn set-intersection [a b]
  (set (filter a b)))

[(= (set-intersection #{0 1 2 3} #{2 3 4 5}) #{2 3})
 (= (set-intersection #{0 1 2} #{3 4 5}) #{})
 (= (set-intersection #{:a :b :c :d} #{:c :e :a :f :d}) #{:a :c :d})]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_83_a_half_truth&#34;&gt;83. A Half-Truth&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which takes a variable number of booleans. Your function should return true if some of the parameters are true, but not all of the parameters are true. Otherwise your function should return false.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn a-half-truth [&amp;amp; booleans]
  (= (set booleans) #{true false}))

[(= false (a-half-truth false false))
 (= true (a-half-truth true false))
 (= false (a-half-truth true))
 (= true (a-half-truth false true false))
 (= false (a-half-truth true true true))
 (= true (a-half-truth true true true false))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_88_symmetric_difference&#34;&gt;88. Symmetric Difference&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns the symmetric difference of two sets. The symmetric difference is the set of items belonging to one but not both of the two sets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(require &#39;clojure.set)
(defn symmetric-difference [a b]
  (clojure.set/difference
    (clojure.set/union a b)
    (clojure.set/intersection a b)))

[(= (symmetric-difference #{1 2 3 4 5 6} #{1 3 5 7}) #{2 4 6 7})
 (= (symmetric-difference #{:a :b :c} #{}) #{:a :b :c})
 (= (symmetric-difference #{} #{4 5 6}) #{4 5 6})
 (= (symmetric-difference #{[1 2] [2 3]} #{[2 3] [3 4]}) #{[1 2] [3 4]})]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_90_cartesian_product&#34;&gt;90. Cartesian Product&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which calculates the Cartesian product of two sets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn cartesian-product [a b]
  (into #{}
        (for [x a y b] (vector x y))))

[(= (cartesian-product #{&#34;ace&#34; &#34;king&#34; &#34;queen&#34;} #{&#34;♠&#34; &#34;♥&#34; &#34;♦&#34; &#34;♣&#34;})
    #{[&#34;ace&#34;   &#34;♠&#34;] [&#34;ace&#34;   &#34;♥&#34;] [&#34;ace&#34;   &#34;♦&#34;] [&#34;ace&#34;   &#34;♣&#34;]
      [&#34;king&#34;  &#34;♠&#34;] [&#34;king&#34;  &#34;♥&#34;] [&#34;king&#34;  &#34;♦&#34;] [&#34;king&#34;  &#34;♣&#34;]
      [&#34;queen&#34; &#34;♠&#34;] [&#34;queen&#34; &#34;♥&#34;] [&#34;queen&#34; &#34;♦&#34;] [&#34;queen&#34; &#34;♣&#34;]})
 (= (cartesian-product #{1 2 3} #{4 5})
   #{[1 4] [2 4] [3 4] [1 5] [2 5] [3 5]})
 (= 300 (count (cartesian-product (into #{} (range 10))
                                  (into #{} (range 30)))))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_95_to_tree_or_not_to_tree&#34;&gt;95. To Tree, or not to Tree&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a predicate which checks whether or not a given sequence represents a binary tree. Each node in the tree must have a value, a left child, and a right child.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn binary? [s]
  (and
    (sequential? s)
    (= (count s) 3)
    (let [ left (second s)
          right (last s)]
      (and
        (or
          (nil? left)
          (binary? left))
        (or
          (nil? right)
          (binary? right))))))

[(= (binary? &#39;(:a (:b nil nil) nil))
    true)
 (= (binary? &#39;(:a (:b nil nil)))
   false)
 (= (binary? [1 nil [2 [3 nil nil] [4 nil nil]]])
    true)
 (= (binary? [1 [2 nil nil] [3 nil nil] [4 nil nil]])
   false)
 (= (binary? [1 [2 [3 [4 nil nil] nil] nil] nil])
    true)
 (= (binary? [1 [2 [3 [4 false nil] nil] nil] nil])
   false)
 (= (binary? &#39;(:a nil ()))
    false)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_96_beauty_is_symmetry&#34;&gt;96. Beauty is Symmetry&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let us define a binary tree as &#34;symmetric&#34; if the left half of the tree is the mirror image of the right half of the tree. Write a predicate to determine whether or not a given binary tree is symmetric. (see To Tree, or not to Tree for a reminder on the tree representation we&amp;#8217;re using).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn beauty-is-symmetry [s]
  {:pre [(sequential? s)
        (= (count s) 3)]}
  (let [left (second s)
        right (last s)
        mirror (fn mirror [s] {:pre [(= (count s) 3)]}
                 (let [left (second s)
                       right (last s)]
                   (if (and (nil? left) (nil? right))
                     s
                     (list
                       (first s)
                       (if (sequential? right) (mirror right) right)
                       (if (sequential? left) (mirror left) left)))))]
    (=
      left
      (if (sequential? right)
        (mirror right)
        right))))

[(= (beauty-is-symmetry &#39;(:a (:b nil nil) (:b nil nil))) true)
 (= (beauty-is-symmetry &#39;(:a (:b nil nil) nil)) false)
 (= (beauty-is-symmetry &#39;(:a (:b nil nil) (:c nil nil))) false)
 (= (beauty-is-symmetry [1 [2 nil [3 [4 [5 nil nil] [6 nil nil]] nil]]
                        [2 [3 nil [4 [6 nil nil] [5 nil nil]]] nil]])
    true)
 (= (beauty-is-symmetry [1 [2 nil [3 [4 [5 nil nil] [6 nil nil]] nil]]
                           [2 [3 nil [4 [5 nil nil] [6 nil nil]]] nil]])
   false)
 (= (beauty-is-symmetry [1 [2 nil [3 [4 [5 nil nil] [6 nil nil]] nil]]
                           [2 [3 nil [4 [6 nil nil] nil]] nil]])
    false)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_97_pascal_s_triangle&#34;&gt;97. Pascal&amp;#8217;s Triangle&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pascal&amp;#8217;s triangle is a triangle of numbers computed using the following rules:
* The first row is 1.
* Each successive row is computed by adding together adjacent numbers in the row above, and adding a 1 to the beginning and end of the row.
Write a function which returns the nth row of Pascal&amp;#8217;s Triangle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn pascals-triangle [n]
  (last
    (take n
      (iterate
        (fn next-row [previous-row]
            (into []
                  (map (fn [e] (reduce + e))
                       (partition 2 1
                                  (conj (into [0] previous-row) 0)))))
        [1]))))

[(= (pascals-triangle 1) [1])
 (= (map pascals-triangle (range 1 6))
    [     [1]
         [1 1]
        [1 2 1]
       [1 3 3 1]
      [1 4 6 4 1]])
 (= (pascals-triangle 11)
   [1 10 45 120 210 252 210 120 45 10 1])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_99_product_digits&#34;&gt;99. Product Digits&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which multiplies two numbers and returns the result as a sequence of its digits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn product-digits [a b]
  (map js/parseInt
       (str (* a b))))

[(= (product-digits 1 1) [1])
 (= (product-digits 99 9) [8 9 1])
 (= (product-digits 999 99) [9 8 9 0 1])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_100_least_common_multiple&#34;&gt;100. Least Common Multiple&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which calculates the least common multiple. Your function should accept a variable number of positive integers or ratios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn least-common-multiple [&amp;amp; n]
  (letfn [(gcd [a b]
            (if (= b 0)
              a
              (recur b (mod a b))))
          (lcm [a b]
            (/ (* a b) (gcd a b)))]
    (reduce lcm n)))

[(== (least-common-multiple 2 3) 6)
 (== (least-common-multiple 5 3 7) 105)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_107_simple_closures&#34;&gt;107. Simple closures&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Lexical scope and first-class functions are two of the most basic building blocks of a functional language like Clojure. When you combine the two together, you get something very powerful called lexical closures. With these, you can exercise a great deal of control over the lifetime of your local bindings, saving their values for use later, long after the code you&amp;#8217;re running now has finished. It can be hard to follow in the abstract, so let&amp;#8217;s build a simple closure. Given a positive integer n, return a function (f x) which computes xn. Observe that the effect of this is to preserve the value of n for use outside the scope in which it is defined.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn simple-closures [n]
   (fn exp [x]
     (long (Math/pow x n))))

[(= 256 ((simple-closures 2) 16),
        ((simple-closures 8) 2))
 (= [1 8 27 64] (map (simple-closures 3) [1 2 3 4]))
 (= [1 2 4 8 16] (map #((simple-closures %) 2) [0 1 2 3 4]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_118_re_implement_map&#34;&gt;118. Re-implement Map&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Map is one of the core elements of a functional programming language. Given a function f and an input sequence s, return a lazy sequence of (f x) for each element x in s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn reimplement-map [f c]
  (if (not (empty? c))
    (lazy-seq
      (cons (f (first c))
            (reimplement-map f (rest c))))))

[(= [3 4 5 6 7]
    (reimplement-map inc [2 3 4 5 6]))
 (= (repeat 10 nil)
    (reimplement-map (fn [_] nil) (range 10)))
 (= [1000000 1000001]
    (-&amp;gt;&amp;gt; (reimplement-map inc (range))
         (drop (dec 1000000))
         (take 2)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_120_sum_of_square_of_digits&#34;&gt;120. Sum of square of digits&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which takes a collection of integers as an argument. Return the count of how many elements are smaller than the sum of their squared component digits. For example: 10 is larger than 1 squared plus 0 squared; whereas 15 is smaller than 1 squared plus 5 squared.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn sum-of-square-of-digits [c]
  (count
    (filter #(&amp;lt; (first %) (second %))
            (map (fn [d]
                   (vector (first d)
                           (reduce + (map #(* % %) (second d)))))
                 (map (fn [e]
                        (vector e (map js/parseInt (str e))))
                      c)))))

[(= 8 (sum-of-square-of-digits (range 10)))
 (= 19 (sum-of-square-of-digits (range 30)))
 (= 50 (sum-of-square-of-digits (range 100)))
 (= 50 (sum-of-square-of-digits (range 1000)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_122_read_a_binary_number&#34;&gt;122. Read a binary number&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Convert a binary number, provided in the form of a string, to its numerical value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn read-a-binary-number [s]
  (int
   (reduce +
     (map-indexed #(* %2 (Math/pow 2 %1))
                  (map js/parseInt
                       (reverse s))))))

[(= 0     (read-a-binary-number &#34;0&#34;))
 (= 7     (read-a-binary-number &#34;111&#34;))
 (= 8     (read-a-binary-number &#34;1000&#34;))
 (= 9     (read-a-binary-number &#34;1001&#34;))
 (= 255   (read-a-binary-number &#34;11111111&#34;))
 (= 1365  (read-a-binary-number &#34;10101010101&#34;))
 (= 65535 (read-a-binary-number &#34;1111111111111111&#34;))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_128_recognize_playing_cards&#34;&gt;128. Recognize Playing Cards&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A standard American deck of playing cards has four suits - spades, hearts, diamonds, and clubs - and thirteen cards in each suit. Two is the lowest rank, followed by other integers up to ten; then the jack, queen, king, and ace. It&amp;#8217;s convenient for humans to represent these cards as suit/rank pairs, such as H5 or DQ: the heart five and diamond queen respectively. But these forms are not convenient for programmers, so to write a card game you need some way to parse an input string into meaningful components. For purposes of determining rank, we will define the cards to be valued from 0 (the two) to 12 (the ace). Write a function which converts (for example) the string &#34;SJ&#34; into a map of {:suit :spade, :rank 9}. A ten will always be represented with the single character &#34;T&#34;, rather than the two characters &#34;10&#34;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn recognize-playing-cards [s]
  {:suit ({\S :spades \D :diamond \H :heart \C :club}
          (first s))
   :rank ({\2 0 \3 1 \4 2 \5 3 \6 4 \7 5 \8 6 \9 7 \T 8 \J 9 \Q 10 \K 11  \A 12}
          (second s))})

[(= {:suit :diamond :rank 10} (recognize-playing-cards &#34;DQ&#34;))
 (= {:suit :heart :rank 3} (recognize-playing-cards &#34;H5&#34;))
 (= {:suit :club :rank 12} (recognize-playing-cards &#34;CA&#34;))
 (= (range 13) (map (comp :rank recognize-playing-cards str)
                    &#39;[S2 S3 S4 S5 S6 S7
                      S8 S9 ST SJ SQ SK SA]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_135_infix_calculator&#34;&gt;135. Infix Calculator&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your friend Joe is always whining about Lisps using the prefix notation for math. Show him how you could easily write a function that does math using the infix notation. Is your favorite language that flexible, Joe? Write a function that accepts a variable length mathematical expression consisting of numbers and the operations +, -, *, and /. Assume a simple calculator that does not do precedence and instead just calculates left to right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn infix-calculator [a op b &amp;amp; more]
  (letfn [(infix [a op b] (op a b))]
  (if (zero? (count more))
      (infix a op b)
  	  (recur (infix a op b) (first more) (second more) (drop 2 more)))))

[(= 7  (infix-calculator 2 + 5))
 (= 42 (infix-calculator 38 + 48 - 2 / 2))
 (= 8  (infix-calculator 10 / 2 - 1 * 2))
 (= 72 (infix-calculator 20 / 2 + 2 + 4 + 8 - 6 - 10 * 9))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_143_dot_product&#34;&gt;143. dot product&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Create a function that computes the dot product of two sequences. You may assume that the vectors will have the same length.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn dot-product [a b]
  (reduce + (map * a b)))

[(= 0 (dot-product [0 1 0] [1 0 0]))
 (= 3 (dot-product [1 1 1] [1 1 1]))
 (= 32 (dot-product [1 2 3] [4 5 6]))
 (= 256 (dot-product [2 5 6] [100 10 1]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_146_trees_into_tables&#34;&gt;146. Trees into tables&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Because Clojure&amp;#8217;s for macro allows you to &#34;walk&#34; over multiple sequences in a nested fashion, it is excellent for transforming all sorts of sequences. If you don&amp;#8217;t want a sequence as your final output (say you want a map), you are often still best-off using for, because you can produce a sequence and feed it into a map, for example. For this problem, your goal is to &#34;flatten&#34; a map of hashmaps. Each key in your output map should be the &#34;path&#34; that you would have to take in the original map to get to a value, so for example {1 {2 3}} should result in {[1 2] 3}. You only need to flatten one level of maps: if one of the values is a map, just leave it alone. That is, (get-in original [k1 k2]) should be the same as (get result [k1 k2])&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn trees-into-tables [m]
  (into {}
        (apply concat
               (for [[k v] m]
                 (map #(vector [k (first %)] (second %)) v)))))

[(= (trees-into-tables &#39;{a {p 1, q 2}
                         b {m 3, n 4}})
    &#39;{[a p] 1, [a q] 2
      [b m] 3, [b n] 4})
 (= (trees-into-tables &#39;{[1] {a b c d}
                         [2] {q r s t u v w x}})
   &#39;{[[1] a] b, [[1] c] d,
     [[2] q] r, [[2] s] t,
     [[2] u] v, [[2] w] x})
 (= (trees-into-tables &#39;{m {1 [a b c] 3 nil}})
                       &#39;{[m 1] [a b c], [m 3] nil})]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_147_pascal_s_trapezoid&#34;&gt;147. Pascal&amp;#8217;s Trapezoid&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function that, for any given input vector of numbers, returns an infinite lazy sequence of vectors, where each next one is constructed from the previous following the rules used in Pascal&amp;#8217;s Triangle. For example, for [3 1 2], the next row is [3 4 3 2]. Beware of arithmetic overflow! In clojure (since version 1.3 in 2011), if you use an arithmetic operator like + and the result is too large to fit into a 64-bit integer, an exception is thrown. You can use +&#39; to indicate that you would rather overflow into Clojure&amp;#8217;s slower, arbitrary-precision bigint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn pascals-trapezoid [row]
  (iterate
    (fn next-row [previous-row]
      (into []
            (map (fn [e] (reduce + e))
                 (partition 2 1
                            (conj (into [0] previous-row) 0)))))
    row))

[(= (second (pascals-trapezoid [2 3 2])) [2 5 5 2])
 (= (take 5 (pascals-trapezoid [1])) [[1] [1 1] [1 2 1] [1 3 3 1] [1 4 6 4 1]])
 (= (take 2 (pascals-trapezoid [3 1 2])) [[3 1 2] [3 4 3 2]])
 (= (take 100 (pascals-trapezoid [2 4 2])) (rest (take 101 (pascals-trapezoid [2 2]))))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_153_pairwise_disjoint_sets&#34;&gt;153. Pairwise Disjoint Sets&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Given a set of sets, create a function which returns true if no two of those sets have any elements in common and false otherwise. Some of the test cases are a bit tricky, so pay a little more attention to them. Such sets are usually called pairwise disjoint or mutually disjoint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn pairwise-disjoint-sets [s]
  (=
    (count
      (apply concat &#39;() s))
    (count
      (apply clojure.set/union s))))

[(= (pairwise-disjoint-sets #{#{\U} #{\s} #{\e \R \E} #{\P \L} #{\.}})
    true)
 (= (pairwise-disjoint-sets #{#{:a :b :c :d :e}
                            #{:a :b :c :d}
                            #{:a :b :c}
                            #{:a :b}
                            #{:a}})
    false)
 (= (pairwise-disjoint-sets #{#{[1 2 3] [4 5]}
                              #{[1 2] [3 4 5]}
                              #{[1] [2] 3 4 5}
                              #{1 2 [3 4] [5]}})
    true)
 (= (pairwise-disjoint-sets #{#{&#39;a &#39;b}
                              #{&#39;c &#39;d &#39;e}
                              #{&#39;f &#39;g &#39;h &#39;i}
                              #{&#39;&#39;a &#39;&#39;c &#39;&#39;f}})
    true)
 (= (pairwise-disjoint-sets #{#{&#39;(:x :y :z) &#39;(:x :y) &#39;(:z) &#39;()}
                              #{#{:x :y :z} #{:x :y} #{:z} #{}}
                              #{&#39;[:x :y :z] [:x :y] [:z] [] {}}})
    false)
 (= (pairwise-disjoint-sets #{#{(= &#34;true&#34;) false}
                              #{:yes :no}
                              #{(symbol &#34;true&#34;) &#39;false}
                              #{(keyword &#34;yes&#34;) ::no}})
    false)
 (= (pairwise-disjoint-sets #{#{distinct?}
                              #{#(-&amp;gt; %) #(-&amp;gt; %)}
                              #{#(-&amp;gt; %) #(-&amp;gt; %) #(-&amp;gt; %)}
                              #{#(-&amp;gt; %) #(-&amp;gt; %) #(-&amp;gt; %)}})
    true)
 (= (pairwise-disjoint-sets #{#{(#(-&amp;gt; *)) + (quote mapcat) #_ nil}
                             #{&#39;+ &#39;* mapcat (comment mapcat)}
                             #{(do) set contains? nil?}
                             #{, , , #_, , empty?}})
    false)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_157_indexing_sequences&#34;&gt;157. Indexing Sequences&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Transform a sequence into a sequence of pairs containing the original elements along with their index.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn indexing-sequences [s]
  (map-indexed (fn [index element] [element index]) s))

[(= (indexing-sequences [:a :b :c]) [[:a 0] [:b 1] [:c 2]])
 (= (indexing-sequences [0 1 3]) &#39;((0 0) (1 1) (3 2)))
 (= (indexing-sequences [[:foo] {:bar :baz}]) [[[:foo] 0] [{:bar :baz} 1]])]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_166_comparisons&#34;&gt;166. Comparisons&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For any orderable data type it&amp;#8217;s possible to derive all of the basic comparison operations (&amp;lt;, ≤, =, ≠, ≥, and &amp;gt;) from a single operation (any operator but = or ≠ will work). Write a function that takes three arguments, a less than operator for the data and two items to compare. The function should return a keyword describing the relationship between the two items. The keywords for the relationship between x and y are as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;x = y → :eq&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;x &amp;gt; y → :gt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;x &amp;lt; y → :lt&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn comparisons [f l r]
  (cond
    (= (f l r) (f r l)) :eq
    (f l r) :lt
    :else :gt))

[(= :gt (comparisons &amp;lt; 5 1))
 (= :eq (comparisons (fn [x y] (&amp;lt; (count x) (count y))) &#34;pear&#34; &#34;plum&#34;))
 (= :lt (comparisons (fn [x y] (&amp;lt; (mod x 5) (mod y 5))) 21 3))
 (= :gt (comparisons &amp;gt; 0 2))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_173_intro_to_destructuring_2&#34;&gt;173. Intro to Destructuring 2&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sequential destructuring allows you to bind symbols to parts of sequential things (vectors, lists, seqs, etc.): (let [bindings* ] exprs*) Complete the bindings so all let-parts evaluate to 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;[(= 3
   (let [[f x] [+ (range 3)]] (apply f x))
   (let [[[f x] b] [[+ 1] 2]] (f x b))
   (let [[f x] [inc 2]] (f x)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An Astronaut&#39;s Guide to Life on Earth - Christian Hadfield</title>
      <link>http://www.anthony-galea.com/blog/post/an-astronauts-guide-to-life-on-earth---christian-hadfield/</link>
      <pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/an-astronauts-guide-to-life-on-earth---christian-hadfield/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In his book &lt;a href=&#34;https://www.goodreads.com/book/show/18170143-an-astronaut-s-guide-to-life-on-earth&#34;&gt;An Astronaut&amp;#8217;s Guide to Life on Earth&lt;/a&gt;, Christian Hadfield presents a collection of sometimes counterintuitive lessons he learned during his career as an astronaut. It is a fun read interspersed with paragraphs like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At this point, when your hands are covered with blobs of urine and drops are floating around the bathroom, too, it’s usually helpful to remind yourself that you are doing all this in the name of scientific inquiry.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Below you can find some excerpts that have rang a bell while I was reading it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_control_and_attitude&#34;&gt;On Control and Attitude&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Too many variables are out of my control. There’s really just one thing I can control: my attitude during the journey, which is what keeps me feeling steady and stable, and what keeps me headed in the right direction. So I consciously monitor and correct, if necessary, because losing attitude would be far worse than not achieving my goal.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_emotion&#34;&gt;On Emotion&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As I have discovered again and again, things are never as bad (or as good) as they seem at the time.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Our training pushes us to develop a new set of instincts: instead of reacting to danger with a fight-or-flight adrenaline rush, we’re trained to respond unemotionally by immediately prioritizing threats and methodically seeking to defuse them. We go from wanting to bolt for the exit to wanting to engage and understand what’s going wrong, then fix it.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When you see red, count to 10.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_taking_risks_and_having_a_plan&#34;&gt;On taking Risks and having a Plan&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To me, the only good reason to take a risk is that there’s a decent possibility of a reward that outweighs the hazard.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A lot of people talk about expecting the best but preparing for the worst, but I think that’s a seductively misleading concept. There’s never just one “worst.” Almost always there’s a whole spectrum of bad possibilities. The only thing that would really qualify as the worst would be not having a plan for how to cope.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Part of preparing for the worst is keeping in mind that your sim itself may be based on the wrong assumptions, in which case you’ll draw the wrong, perfectly polished conclusions.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_criticism&#34;&gt;On Criticism&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In any field, it’s a plus if you view criticism as potentially helpful advice rather than as a personal attack.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_success&#34;&gt;On Success&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Early success is a terrible teacher. You’re essentially being rewarded for a lack of preparation, so when you find yourself in a situation where you must prepare, you can’t do it. You don’t know how.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_iatrogenics&#34;&gt;On Iatrogenics&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Just as a panel of hairdressers is likely to recommend that you change your hairstyle, a panel of surgeons is likely to recommend surgery.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_convincing_others&#34;&gt;On Convincing Others&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can present all the random sample studies you want to prove that it’s safe to walk under a ladder, but a superstitious person will still avoid that ladder.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_knowledge&#34;&gt;On Knowledge&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You don’t yet know what you don’t know—and regardless of your abilities, your experience and your level of authority, there will definitely be something you don’t know.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_leadership&#34;&gt;On Leadership&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ultimately, leadership is not about glorious crowning acts. It’s about keeping your team focused on a goal and motivated to do their best to achieve it, especially when the stakes are high and the consequences really matter. It is about laying the groundwork for others’ success, and then standing back and letting them shine.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_on_humility&#34;&gt;On Humility&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The most important lessons I’ve learned &amp;#8230;&amp;#8203; to value the wisdom of humility, as well as the sense of perspective it gives you.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Solutions to 4Clojure Elementary Problems</title>
      <link>http://www.anthony-galea.com/blog/post/solutions-to-4clojure-elementary-problems/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/solutions-to-4clojure-elementary-problems/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this post, I will share solutions to the elementary problems I solved on &lt;a href=&#34;http://www.4clojure.com&#34;&gt;4Clojure&lt;/a&gt;. You can find all the solutions on &lt;a href=&#34;https://github.com/anthonygalea/solutions-4clojure&#34;&gt;GitHub&lt;/a&gt;. If you have any suggestions/alternative solutions I would love to hear from you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_1_nothing_but_the_truth&#34;&gt;1. Nothing but the Truth&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is a clojure form. Enter a value which will make the form evaluate to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def nothing-but-the-truth true)

[(= nothing-but-the-truth true)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_2_simple_math&#34;&gt;2. Simple Math&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you are not familiar with polish notation, simple arithmetic might seem confusing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def simple-math 4)

[(= (- 10 (* 2 3)) simple-math)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_3_intro_to_strings&#34;&gt;3. Intro to Strings&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Clojure strings are Java strings. This means that you can use any of the Java string methods on Clojure strings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def intro-to-strings &#34;HELLO WORLD&#34;)

[(= intro-to-strings (.toUpperCase &#34;hello world&#34;))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_4_intro_to_lists&#34;&gt;4. Intro to Lists&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Lists can be constructed with either a function or a quoted form.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;[(= (list :a :b :c) &#39;(:a :b :c))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_5_lists_conj&#34;&gt;5. Lists: conj&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When operating on a list, the &lt;code&gt;conj&lt;/code&gt; function will return a new list with one or more items &#34;added&#34; to the front.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def lists-conj &#39;(1 2 3 4))

[(= lists-conj (conj &#39;(2 3 4) 1))
 (= lists-conj (conj &#39;(3 4) 2 1))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_6_intro_to_vectors&#34;&gt;6. Intro to Vectors&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Vectors can be constructed several ways. You can compare them with lists.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def intro-to-vectors [:a :b :c])

[(= intro-to-vectors (list :a :b :c) (vec &#39;(:a :b :c)) (vector :a :b :c))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_7_vectors_conj&#34;&gt;7. Vectors: conj&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When operating on a Vector, the &lt;code&gt;conj&lt;/code&gt; function will return a new vector with one or more items &#34;added&#34; to the end.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def vectors-conj [1 2 3 4])

[(= vectors-conj (conj [1 2 3] 4))
 (= vectors-conj (conj [1 2] 3 4))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_8_intro_to_sets&#34;&gt;8. Intro to Sets&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sets are collections of unique values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def intro-to-sets #{:a :b :c :d})

[(= intro-to-sets (set &#39;(:a :a :b :c :c :c :c :d :d)))
 (= intro-to-sets (clojure.set/union #{:a :b :c} #{:b :c :d}))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_9_sets_conj&#34;&gt;9. Sets: conj&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When operating on a set, the &lt;code&gt;conj&lt;/code&gt; function returns a new set with one or more keys &#34;added&#34;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def sets-conj #{1 2 3 4})

[(= sets-conj (conj #{1 4 3} 2))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_10_intro_to_maps&#34;&gt;10. Intro to Maps&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Maps store key-value pairs. Both maps and keywords can be used as lookup functions. Commas can be used to make maps more readable, but they are not required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def intro-to-maps 20)

[(= intro-to-maps ((hash-map :a 10, :b 20, :c 30) :b))
 (= intro-to-maps (:b {:a 10, :b 20, :c 30}))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_11_maps_conj&#34;&gt;11. Maps: conj&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When operating on a map, the &lt;code&gt;conj&lt;/code&gt; function returns a new map with one or more key-value pairs &#34;added&#34;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def maps-conj {:a 1, :b 2, :c 3})

[(= maps-conj (conj {:a 1} {:b 2} [:c 3]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_12_intro_to_sequences&#34;&gt;12. Intro to Sequences&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All Clojure collections support sequencing.
You can operate on sequences with functions like &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;, and &lt;code&gt;last&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def intro-to-sequences 3)

[(= intro-to-sequences (first &#39;(3 2 1)))
 (= intro-to-sequences (second [2 3 4]))
 (= intro-to-sequences (last (list 1 2 3)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_13_sequences_rest&#34;&gt;13. Sequences: rest&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The rest function will return all the items of a sequence except the first.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def sequences-rest [20 30 40])

[(= sequences-rest (rest [10 20 30 40]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_14_intro_to_functions&#34;&gt;14. Intro to Functions&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Clojure has many different ways to create functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def intro-to-functions 8)

[(= intro-to-functions ((fn add-five [x] (+ x 5)) 3))
 (= intro-to-functions ((fn [x] (+ x 5)) 3))
 (= intro-to-functions (#(+ % 5) 3))
 (= intro-to-functions ((partial + 5) 3))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_15_double_down&#34;&gt;15. Double Down&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which doubles a number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn double-down [n]
  (* 2 n))

[(= (double-down 2) 4)
 (= (double-down 3) 6)
 (= (double-down 11) 22)
 (= (double-down 7) 14)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_16_hello_world&#34;&gt;16. Hello World&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which returns a personalized greeting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn hello-world [name]
  (str &#34;Hello, &#34; name &#34;!&#34;))

[(= (hello-world &#34;Dave&#34;) &#34;Hello, Dave!&#34;)
 (= (hello-world &#34;Jenn&#34;) &#34;Hello, Jenn!&#34;)
 (= (hello-world &#34;Rhea&#34;) &#34;Hello, Rhea!&#34;)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_17_sequences_map&#34;&gt;17. Sequences: map&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The map function takes two arguments: a function (f) and a sequence (s). Map returns a new sequence consisting of the result of applying f to each item of s. Do not confuse the map function with the map data structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def sequences-map &#39;(6 7 8))

[(= sequences-map (map #(+ % 5) &#39;(1 2 3)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_18_sequences_filter&#34;&gt;18. Sequences: filter&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The filter function takes two arguments: a predicate function (f) and a sequence (s). Filter returns a new sequence consisting of all the items of &lt;code&gt;s&lt;/code&gt; for which &lt;code&gt;(f item)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;[(= &#39;(6 7) (filter #(&amp;gt; % 5) &#39;(3 4 5 6 7)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_35_local_bindings&#34;&gt;35. Local bindings&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Clojure lets you give local names to values using the special let-form.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;[(= 7 (let [x 5] (+ 2 x)))
 (= 7 (let [x 3, y 10] (- y x)))
 (= 7 (let [x 21] (let [y 3] (/ x y))))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_36_let_it_be&#34;&gt;36. Let it Be&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Can you bind &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; so that these are all true?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;[(= 10 (let [x 7, y 3, z 1] (+ x y)))
 (= 4 (let [x 7, y 3, z 1] (+ y z)))
 (= 1 (let [x 7, y 3, z 1] z))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_37_regular_expressions&#34;&gt;37. Regular Expressions&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Regex patterns are supported with a special reader macro.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def regular-expressions &#34;ABC&#34;)

[(= regular-expressions (apply str (re-seq #&#34;[A-Z]+&#34; &#34;bA1B3Ce &#34;)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_52_intro_to_destructuring&#34;&gt;52. Intro to Destructuring&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let bindings and function parameter lists support destructuring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;[(= [2 4] (let [[a b c d e] [0 1 2 3 4]] [c e]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_57_simple_recursion&#34;&gt;57. Simple Recursion&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A recursive function is a function which calls itself. This is one of the fundamental techniques used in functional programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def simple-recursion &#39;(5 4 3 2 1))

[(= simple-recursion ((fn foo [x]
                        (when (&amp;gt; x 0)
                          (conj (foo (dec x)) x))) 5))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_64_intro_to_reduce&#34;&gt;64. Intro to Reduce&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Reduce takes a 2 argument function and an optional starting value. It then applies the function to the first 2 items in the sequence (or the starting value and the first element of the sequence). In the next iteration the function will be called on the previous return value and the next item from the sequence, thus reducing the entire collection to one value. Don&amp;#8217;t worry, it&amp;#8217;s not as complicated as it sounds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def intro-to-reduce +)

[(= 15 (reduce intro-to-reduce [1 2 3 4 5]))
 (=  0 (reduce intro-to-reduce []))
 (=  6 (reduce intro-to-reduce 1 [2 3]))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_68_recurring_theme&#34;&gt;68. Recurring Theme&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Clojure only has one non-stack-consuming looping construct: &lt;code&gt;recur&lt;/code&gt;. Either a function or a loop can be used as the recursion point. Either way, recur rebinds the bindings of the recursion point to the values it is passed. Recur must be called from the tail-position, and calling it elsewhere will result in an error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def recurring-theme [7 6 5 4 3])

[(= recurring-theme
   (loop [x 5
          result []]
     (if (&amp;gt; x 0)
       (recur (dec x) (conj result (+ 2 x)))
       result)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_71_rearranging_code&#34;&gt;71. Rearranging Code: - &amp;gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The - &amp;gt; macro threads an expression x through a variable number of forms. First, x is inserted as the second item in the first form, making a list of it if it is not a list already. Then the first form is inserted as the second item in the second form, making a list of that form if necessary. This process continues for all the forms. Using - &amp;gt; can sometimes make your code more readable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def rearranging-code last)

[(= (rearranging-code (sort (rest (reverse [2 5 4 1 3 6]))))
    (-&amp;gt; [2 5 4 1 3 6] (reverse) (rest) (sort) (rearranging-code))
    5)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_72_rearranging_code&#34;&gt;72. Rearranging Code: - &amp;gt;&amp;gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The - &amp;gt;&amp;gt; macro threads an expression x through a variable number of forms. First, x is inserted as the last item in the first form, making a list of it if it is not a list already. Then the first form is inserted as the last item in the second form, making a list of that form if necessary. This process continues for all the forms. Using - &amp;gt;&amp;gt; can sometimes make your code more readable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn rearranging-code [s]
  (reduce + s))

[(= (rearranging-code (map inc (take 3 (drop 2 [2 5 4 1 3 6]))))
   (-&amp;gt;&amp;gt; [2 5 4 1 3 6] (drop 2) (take 3) (map inc) (rearranging-code))
   11)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_134_a_nil_key&#34;&gt;134. A nil key&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Write a function which, given a key and map, returns true iff the map contains an entry with that key and its value is nil.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn a-nil-key [key map]
  (if (contains? map key)
    (= (key map) nil)
  	false))

[(true?  (a-nil-key :a {:a nil :b 2}))
 (false? (a-nil-key :b {:a nil :b 2}))
 (false? (a-nil-key :c {:a nil :b 2}))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_145_for_the_win&#34;&gt;145. For the win&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Clojure&amp;#8217;s for macro is a tremendously versatile mechanism for producing a sequence based on some other sequence(s). It can take some time to understand how to use it properly, but that investment will be paid back with clear, concise sequence-wrangling later. With that in mind, read over these for expressions and try to see how each of them produces the same result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def for-the-win [1 5 9 13 17 21 25 29 33 37])

[(= for-the-win (for [x (range 40)
             :when (= 1 (rem x 4))]
         x))
 (= for-the-win (for [x (iterate #(+ 4 %) 0)
             :let [z (inc x)]
             :while (&amp;lt; z 40)]
         z))
 (= for-the-win (for [[x y] (partition 2 (range 20))]
         (+ x y)))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_156_map_defaults&#34;&gt;156. Map Defaults&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When retrieving values from a map, you can specify default values in case the key is not found:
&lt;code&gt;(= 2 (:foo {:bar 0, :baz 1} 2))&lt;/code&gt;
However, what if you want the map itself to contain the default values? Write a function which takes a default value and a sequence of keys and constructs a map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(defn map-defaults [default keys]
  (zipmap keys (repeat default)))

[(= (map-defaults 0 [:a :b :c]) {:a 0 :b 0 :c 0})
 (= (map-defaults &#34;x&#34; [1 2 3]) {1 &#34;x&#34; 2 &#34;x&#34; 3 &#34;x&#34;})
 (= (map-defaults [:a :b] [:foo :bar]) {:foo [:a :b] :bar [:a :b]})]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_161_subset_and_superset&#34;&gt;161. Subset and Superset&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Set A is a subset of set B, or equivalently B is a superset of A, if A is &#34;contained&#34; inside B. A and B may coincide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def subset-and-superset #{1 2})

[(clojure.set/superset? subset-and-superset #{2})
 (clojure.set/subset? #{1} subset-and-superset)
 (clojure.set/superset? subset-and-superset #{1 2})
 (clojure.set/subset? #{1 2} subset-and-superset)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_162_logical_falsity_and_truth&#34;&gt;162. Logical falsity and truth&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In Clojure, only nil and false represent the values of logical falsity in conditional tests - anything else is logical truth.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-klipse&#34; data-lang=&#34;klipse&#34;&gt;(def logical-falsity-and-truth 1)

[(= logical-falsity-and-truth (if-not false 1 0))
 (= logical-falsity-and-truth (if-not nil 1 0))
 (= logical-falsity-and-truth (if true 1 0))
 (= logical-falsity-and-truth (if [] 1 0))
 (= logical-falsity-and-truth (if [0] 1 0))
 (= logical-falsity-and-truth (if 0 1 0))
 (= logical-falsity-and-truth (if 1 1 0))]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These set of problems are pretty simple to solve which is excellent if you&amp;#8217;re just getting started with a language. In future posts I will continue with harder problems. If you want to dive deeper into &lt;a href=&#34;https://clojure.org/&#34;&gt;Clojure&lt;/a&gt; check out Daniel Higginbotham&amp;#8217;s book: &lt;a href=&#34;http://www.braveclojure.com/&#34;&gt;Clojure for the Brave and True&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Better APIs with Java Optional</title>
      <link>http://www.anthony-galea.com/blog/post/better-apis-with-java-optional/</link>
      <pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/better-apis-with-java-optional/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In Java codebases it is very typical to come across code similar to the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;tok-nc&#34;&gt;PlaneProvider&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-n&#34;&gt;Plane&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;getPlane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The contract for &lt;code&gt;PlaneProvider.getPlane()&lt;/code&gt; indicates that a &lt;code&gt;Plane&lt;/code&gt; will be returned. Typically a client using this interface would use it writing something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;Plane&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;planeProvider&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;getPlane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;tok-k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;tok-kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;fly&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Notice that if the client doesn&amp;#8217;t perform the null check and a &lt;code&gt;null&lt;/code&gt; is returned by &lt;code&gt;getPlane()&lt;/code&gt; we would get a &lt;code&gt;NullPointerException&lt;/code&gt; at runtime when we call &lt;code&gt;plane.fly()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_the_groovy_operator&#34;&gt;The Groovy ?. operator&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Groovy provides the &lt;code&gt;?.&lt;/code&gt; operator in an attempt to provide a cleaner way to write the client code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;Plane&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;planeProvider&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;getPlane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;?.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;fly&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If &lt;code&gt;plane&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; the call to &lt;code&gt;fly()&lt;/code&gt; will not be performed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_enter_java_8_optional&#34;&gt;Enter Java 8 Optional&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Using the new &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt; type in Java 8 we could rewrite the &lt;code&gt;PlaneProvider&lt;/code&gt; interface above like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;tok-nn&#34;&gt;java.util.Optional&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;tok-kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;tok-nc&#34;&gt;PlaneProvider&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;tok-n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;Plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;getPlane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Just by reading the signature of &lt;code&gt;PlaneProvider.getPlane()&lt;/code&gt; we can immediately tell that a plane may or may not be returned. The concrete implementation of &lt;code&gt;PlaneProvider&lt;/code&gt; would use &lt;code&gt;Optional.of(somePlane)&lt;/code&gt; to return a value or &lt;code&gt;Optional.empty()&lt;/code&gt; to indicate what was previously indicated with a &lt;code&gt;null&lt;/code&gt; value:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;tok-nc&#34;&gt;RyanairPlaneProvider&lt;/span&gt; &lt;span class=&#34;tok-kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;PlaneProvider&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;Plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;getPlane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-n&#34;&gt;havePlane&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the client we can then use &lt;code&gt;Optional.isPresent()&lt;/code&gt; and &lt;code&gt;Optional.get()&lt;/code&gt; to check for the presence of a value and retrieve it if we want, leading to more readable code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;Plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;planeProvider&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;getPlane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;tok-k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;isPresent&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;())&lt;/span&gt;
  &lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;fly&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;Optional&lt;/code&gt; class provides additional methods which support a more functional style when writing code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;Plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;planeProvider&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;getPlane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;ifPresent&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;fly&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;tok-c1&#34;&gt;//or&lt;/span&gt;
&lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;ifPresent&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;Plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;fly&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can also model the case where a plane cannot be provided by the &lt;code&gt;PlaneProvider&lt;/code&gt; using &lt;code&gt;orElse()&lt;/code&gt; and using another object &lt;code&gt;sparePlane&lt;/code&gt; as fallback:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;Plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;planeProvider&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;getPlane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;orElse&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;sparePlane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;fly&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And in the case where we don&amp;#8217;t have any spare planes we can write:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;Plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;planeProvider&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;getPlane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;tok-n&#34;&gt;plane&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;orElseThrow&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;fly&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_not_on_java_8&#34;&gt;Not on Java 8?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If for some reason you&amp;#8217;re on a version of Java prior to Java 8 you can still use &lt;code&gt;Optional&lt;/code&gt; by using the &lt;a href=&#34;https://code.google.com/p/guava-libraries/wiki/UsingAndAvoidingNullExplained#Optional&#34;&gt;Guava&lt;/a&gt; library.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The Builder Pattern in Java</title>
      <link>http://www.anthony-galea.com/blog/post/the-builder-pattern-in-java/</link>
      <pubDate>Sat, 09 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/the-builder-pattern-in-java/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Builder pattern is a &lt;code&gt;creational design pattern&lt;/code&gt; which can be used to address the telescoping constructor anti-pattern. It accomplishes this by separating the construction of an object from its representation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_telescoping_constructor_anti_pattern&#34;&gt;Telescoping constructor anti-pattern&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This pattern arises when there are multiple ways of constructing an object, usually because some properties are optional. You can see that as the number of fields for an object increases, the number of constructors we need to provide can grow exponentially:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;tok-kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;tok-nc&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;tok-c1&#34;&gt;//required&lt;/span&gt;
  &lt;span class=&#34;tok-kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;tok-c1&#34;&gt;//optional&lt;/span&gt;
  &lt;span class=&#34;tok-kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;tok-c1&#34;&gt;//optional&lt;/span&gt;

  &lt;span class=&#34;tok-kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;firstName&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;tok-kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;firstName&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;surname&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;tok-kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;firstName&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;surname&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;tok-kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;firstName&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_using_a_javabean&#34;&gt;Using a JavaBean&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Instead of providing constructors we could write a JavaBean which exposes getters and setters for each field:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;tok-kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;tok-nc&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;tok-kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;tok-kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;tok-kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;getFirstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;tok-kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;setFirstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;firstName&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;tok-o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;and then only call the setters for the fields we want to set:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;tok-n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Jack&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;tok-n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;setSurname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Johnson&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The problem with this is that the object may be in an inconsistent state partway through its construction. Also, the JavaBeans pattern doesn&amp;#8217;t allow us to make the class immutable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_using_a_builder&#34;&gt;Using a builder&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The third option is to use the builder pattern where &lt;code&gt;Person&lt;/code&gt; is only used to represent a person and &lt;code&gt;Person.Builder&lt;/code&gt; is responsible for creating objects of type &lt;code&gt;Person&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://www.anthony-galea.com/images/2016-01-09-builder.png&#34; alt=&#34;2016 01 09 builder&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is how we could add a &lt;code&gt;Builder&lt;/code&gt; to the example above:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;tok-kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;tok-nc&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;tok-kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;tok-kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;tok-kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;Builder&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;firstName&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;surname&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;tok-kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;tok-kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;tok-kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;tok-nc&#34;&gt;Builder&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;tok-kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;tok-kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;tok-kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;tok-n&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;firstName&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;firstName&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;tok-kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Builder&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;surname&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;tok-k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;tok-kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Builder&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;tok-k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;tok-kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;tok-nf&#34;&gt;createPerson&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;tok-k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;tok-k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Note that the constructor for &lt;code&gt;Person&lt;/code&gt; is private, accessible only to the &lt;code&gt;Builder&lt;/code&gt;. Then we use the builder like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;jack&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Jack&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;surname&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Johnson&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
                                        &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;createPerson&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As you can see the client works with a fluent API, that is very easy to write. It is immediately clear that &lt;code&gt;name&lt;/code&gt; is a required parameter and &lt;code&gt;surname&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; are optional.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_intellij_idea_refactoring&#34;&gt;IntelliJ IDEA refactoring&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;IntelliJ has a nice &lt;a href=&#34;https://www.jetbrains.com/idea/help/replace-constructor-with-builder.html&#34;&gt;Replace Constructor with Builder&lt;/a&gt; refactoring which allows you to quickly generate a builder and replace the existing constructor call:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://www.anthony-galea.com/images/2016-01-09-refactor-constructor-with-builder.png&#34; alt=&#34;2016 01 09 refactor constructor with builder&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When you generate the builder you can also use the &lt;a href=&#34;https://www.jetbrains.com/idea/help/move-refactorings.html&#34;&gt;Move Refactoring&lt;/a&gt; to make it an inner class of the class for which it generates an object:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://www.anthony-galea.com/images/2016-01-09-move.png&#34; alt=&#34;2016 01 09 move&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can find this pattern and many other good practices for Java described in the book &lt;a href=&#34;https://www.goodreads.com/book/show/105099.Effective_Java_Programming_Language_Guide&#34;&gt;Effective Java by Joshua Bloch&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An Introduction to Load Testing with Gatling</title>
      <link>http://www.anthony-galea.com/blog/post/an-introduction-to-load-testing-with-gatling/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.anthony-galea.com/blog/post/an-introduction-to-load-testing-with-gatling/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Many developers are familiar with the &lt;a href=&#34;http://jmeter.apache.org/&#34;&gt;Apache JMeter&lt;/a&gt; or &lt;a href=&#34;https://httpd.apache.org/docs/2.2/programs/ab.html&#34;&gt;Apache Bench&lt;/a&gt; tools for writing load tests. &lt;a href=&#34;http://gatling.io&#34;&gt;Gatling&lt;/a&gt; is an alternative tool which provides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a concise Scala DSL in order to &lt;a href=&#34;#describe&#34;&gt;Describe a Load Test&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a simple means to &lt;a href=&#34;#run&#34;&gt;Run a Simulation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a nice html &lt;a href=&#34;#report&#34;&gt;Report&lt;/a&gt; with all the results&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;report&#34;&gt;Report&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s start by looking at the typical output of a Gatling load test. We have overall distribution of response time for the whole load test:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://www.anthony-galea.com/images/2016-01-03-gatling-global.png&#34; alt=&#34;2016 01 03 gatling global&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A more detailed response time distribution:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://www.anthony-galea.com/images/2016-01-03-gatling-response-distribution.png&#34; alt=&#34;2016 01 03 gatling response distribution&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Response time percentiles over the duration of the test:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://www.anthony-galea.com/images/2016-01-03-gatling-response-time.png&#34; alt=&#34;2016 01 03 gatling response time&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And number of requests per second over the duration of the test:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://www.anthony-galea.com/images/2016-01-03-gatling-requests-per-second.png&#34; alt=&#34;2016 01 03 gatling requests per second&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;describe&#34;&gt;Describe a Load Test&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is how we would write a simple load test which performs 50 &lt;code&gt;GET&lt;/code&gt; requests against a server running at &lt;code&gt;test.com&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;tok-nc&#34;&gt;SimpleSimulation&lt;/span&gt; &lt;span class=&#34;tok-kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;Simulation&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;tok-c1&#34;&gt;//declare a scenario with a simple get request performed 5 times&lt;/span&gt;
  &lt;span class=&#34;tok-n&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;scn&lt;/span&gt; &lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;tok-n&#34;&gt;scenario&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;myScenario&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;myRequest&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;http://test.com/page.html&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;tok-c1&#34;&gt;//run the scenario with 10 concurrent users&lt;/span&gt;
  &lt;span class=&#34;tok-n&#34;&gt;setUp&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;scn&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;tok-o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gatling refers to load tests as &lt;code&gt;Simulations&lt;/code&gt; which have one or more &lt;code&gt;Scenarios&lt;/code&gt;. In the one above we are saying we will have 10 users execute 5 requests each in parallel. We could provide a &lt;code&gt;Content-Type&lt;/code&gt; header with the request and check for a &lt;code&gt;200&lt;/code&gt; response code like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;myRequest&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;http://test.com/page.html&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If we wanted to do a &lt;code&gt;POST&lt;/code&gt; request with a JSON body and basic authentication, as well as verify something in the response:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;myRequest&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;http://test.com/someresource&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;StringBody&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;{ &amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;myContent&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;myValue&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot; }&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;asJSON&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;basicAuth&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;jsonPath&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;$..someField&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;some value&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The expression used to extract &lt;code&gt;someField&lt;/code&gt; from the response is passed to &lt;code&gt;jsonPath()&lt;/code&gt; and is based on &lt;a href=&#34;http://goessner.net/articles/JsonPath/&#34;&gt;Goessner&amp;#8217;s JsonPath syntax&lt;/a&gt;. We use &lt;code&gt;is()&lt;/code&gt; to verify the expected value is equal to &lt;code&gt;some value&lt;/code&gt;. We can also do other forms of verification on the response json like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;not(expectedValue)&lt;/code&gt;: not equal to &lt;code&gt;expectedValue&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;in(sequence)&lt;/code&gt;: to check that a value belongs to the given &lt;code&gt;sequence&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exists()&lt;/code&gt;, &lt;code&gt;notExists()&lt;/code&gt;: to check for the presence/absence of a field&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For a multipart request with 2 parts and gzip compression:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;myRequest&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;http://test.com/someresource&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;bodyPart&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;StringBodyPart&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;{ &amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;myContent&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;myValue&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot; }&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;bodyPart&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;RawFileBodyPart&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;tok-s&#34;&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;processRequestBody&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;gzipBody&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can also create scenarios with multiple requests and use the result from previous requests in subsequent requests like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;scenario&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;myScenario&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;request1&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;http://test.com/resource1&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;StringBody&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;{ &amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;myContent&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;: &amp;quot;&amp;quot;}&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;jsonPath&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;$..myResponse.guid&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;saveAs&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;guid&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;request2&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;http://test.com/resource2/${guid}&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;StringBody&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;{ &amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;someOtherField&lt;/span&gt;&lt;span class=&#34;tok-s&#34;&gt;&amp;quot;: &amp;quot;&amp;quot;}&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;guid&lt;/code&gt; is extracted from the response of the first call using &lt;code&gt;saveAs(&#34;guid&#34;)&lt;/code&gt; and used in the path to the &lt;code&gt;PUT&lt;/code&gt; call.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Scenarios can also be run with a ramp up. If we wanted to run the scenario above with 1000 users with a ramp up of 20 seconds we would do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;java&#34;&gt;&lt;span class=&#34;tok-n&#34;&gt;setUp&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-n&#34;&gt;scn&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;tok-na&#34;&gt;ramp&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;tok-mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;tok-o&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;run&#34;&gt;Run a Simulation&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are a number of ways to run Gatling simulations. You can &lt;a href=&#34;http://gatling.io/#/download&#34;&gt;download the bundle&lt;/a&gt;, place your simulations under the &lt;code&gt;user-files/simulations&lt;/code&gt; directory and then run &lt;code&gt;bin/gatling.sh&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you prefer integration with your build system there are plugins for &lt;a href=&#34;http://gatling.io/docs/2.1.7/extensions/maven_plugin.html&#34;&gt;Maven&lt;/a&gt;, &lt;a href=&#34;https://github.com/alphagov/gradle-gatling-plugin&#34;&gt;Gradle&lt;/a&gt; and &lt;a href=&#34;http://gatling.io/docs/2.1.7/extensions/sbt_plugin.html&#34;&gt;SBT&lt;/a&gt;. For example, for Maven we just add the dependencies in the &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.gatling.highcharts&lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;gatling-charts-highcharts&lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

&lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
     &lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.gatling&lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;gatling-maven-plugin&lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
     &lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class=&#34;tok-nt&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Place simulations under &lt;code&gt;src/test/scala/com/company/service&lt;/code&gt; and then in the terminal:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;pygments highlight&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;mvn gatling:execute -Dgatling.simulationClass&lt;span class=&#34;tok-o&#34;&gt;=&lt;/span&gt;com.company.service.YourSimulation&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have found Gatling to be a very effective tool for load testing. The DSL is succinct and the reports generated provide all the information typically needed out of the box.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>